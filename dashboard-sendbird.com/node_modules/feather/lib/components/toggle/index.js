"use strict";require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.Toggle = void 0;require("core-js/modules/es.function.name.js");require("core-js/modules/es.object.keys.js");var _react = require("react");











var _styledComponents = _interopRequireDefault(require("styled-components"));

var _animation = require("../../../lib/animation");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}












var ToggleHandle = _styledComponents.default.div.withConfig({ displayName: "toggle__ToggleHandle", componentId: "sc-1wtgcp-0" })(["width:12px;height:12px;background:#fff;border-radius:6px;transform:translateX(4px);transition:0.2s ", ";transition-property:background,transform;will-change:background,transform;"],





_animation.transitionDefault);




var ToggleButton = _styledComponents.default.button.withConfig({ displayName: "toggle__ToggleButton", componentId: "sc-1wtgcp-1" })(["display:inline-flex;align-items:center;margin:0;padding:0;width:40px;height:20px;font-size:0;background:", ";border-radius:10px;border:1px solid ", ";cursor:pointer;transition:0.2s ", ";transition-property:background,box-shadow;will-change:background,box-shadow;outline:0;&[aria-checked='true']{background:", ";border-color:", ";", "{background:#fff;transform:translateX(23px);}}&:focus:not(:active){border-color:", ";box-shadow:0 0 0 2px ", ";&[aria-checked='true']{border-color:#fff;}}&:disabled{background:", ";border-color:", ";cursor:not-allowed;&[aria-checked='true']{background:", ";border-color:", ";", "{background:#fff;}}", "{background:", ";}}"],







(0, _cssVariables.default)('neutral-5'),

(0, _cssVariables.default)('neutral-5'),

_animation.transitionDefault,





(0, _cssVariables.default)('purple-7'),
(0, _cssVariables.default)('purple-7'),

ToggleHandle,






(0, _cssVariables.default)('neutral-3'),
(0, _cssVariables.default)('purple-7'),







(0, _cssVariables.default)('neutral-2'),
(0, _cssVariables.default)('neutral-2'),



(0, _cssVariables.default)('purple-3'),
(0, _cssVariables.default)('purple-3'),

ToggleHandle,




ToggleHandle,
(0, _cssVariables.default)('content-disabled'));




var Toggle = /*#__PURE__*/(0, _react.forwardRef)(
function (_ref, _ref2) {var name = _ref.name,checked = _ref.checked,autoFocus = _ref.autoFocus,disabled = _ref.disabled,onClick = _ref.onClick,onChange = _ref.onChange,onMouseUp = _ref.onMouseUp,restProps = _objectWithoutProperties(_ref, ["name", "checked", "autoFocus", "disabled", "onClick", "onChange", "onMouseUp"]);
  var toggleRef = (0, _react.useRef)(null);

  var focus = function focus() {var _toggleRef$current;
    (_toggleRef$current = toggleRef.current) === null || _toggleRef$current === void 0 ? void 0 : _toggleRef$current.focus();
  };

  var blur = function blur() {var _toggleRef$current2;
    (_toggleRef$current2 = toggleRef.current) === null || _toggleRef$current2 === void 0 ? void 0 : _toggleRef$current2.blur();
  };

  var onCheckedChange = function onCheckedChange(nextChecked, event) {
    event.preventDefault();
    if (disabled) {
      return;
    }

    if (nextChecked !== undefined && checked !== nextChecked) {
      onChange === null || onChange === void 0 ? void 0 : onChange(nextChecked, event);
    }
  };

  var handleClick = function handleClick(event) {
    event.preventDefault();

    var nextChecked = !checked;
    onCheckedChange(nextChecked, event);
    onClick === null || onClick === void 0 ? void 0 : onClick(nextChecked, event);
  };

  var handleKeyDown = function handleKeyDown(event) {
    event.preventDefault();

    switch (event.key) {
      case 'Left': // IE/Edge specific value
      case 'ArrowLeft':
        onCheckedChange(false, event);
        return;

      case 'Right': // IE/Edge specific value
      case 'ArrowRight':
        onCheckedChange(true, event);
        return;

      case 'Enter':
      case ' ':
        onCheckedChange(!checked, event);
        return;

      case 'Esc': // IE/Edge specific value
      case 'Escape':
        blur();
        return;

      default:
        return;}

  };

  // Handle auto focus when click toggle
  var handleMouseUp = function handleMouseUp(event) {
    blur();
    onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(event);
  };

  (0, _react.useEffect)(function () {
    if (autoFocus && !disabled) {
      focus();
    }
  }, [autoFocus, disabled]);

  return /*#__PURE__*/(
    (0, _jsxRuntime.jsxs)(ToggleButton, _objectSpread(_objectSpread({
      ref: function ref(node) {
        toggleRef.current = node;
        if (typeof _ref2 === 'function') {
          _ref2(node);
        } else if (_ref2) {
          _ref2.current = node;
        }
      },
      type: "button",
      role: "switch",
      name: name,
      "aria-checked": checked,
      disabled: disabled,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      onMouseUp: handleMouseUp },
    restProps), {}, { children: [

      checked ? 'On' : 'Off', /*#__PURE__*/
      (0, _jsxRuntime.jsx)(ToggleHandle, {})] })));


});exports.Toggle = Toggle;