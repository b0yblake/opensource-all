"use strict";require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.from.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");Object.defineProperty(exports, "__esModule", { value: true });exports.checkIsExpandedNode = exports.checkIsAllNodesSelected = exports.checkIsSelectedNode = exports.getCurrentSelectedNodes = exports.constructTreeNodes = exports.flatten = exports.leveling = void 0;require("core-js/modules/es.array.concat.js");require("core-js/modules/es.array.map.js");require("core-js/modules/es.array.flat-map.js");require("core-js/modules/es.array.unscopables.flat-map.js");require("core-js/modules/es.array.filter.js");function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var getPosition = function getPosition(level, index) {return "".concat(level, "-").concat(index);};

var leveling = function leveling(treeData, level) {return (
    treeData.map(function (node) {
      var result = _objectSpread(_objectSpread({}, node), {}, { level: level });

      if (node.children) {
        return _objectSpread(_objectSpread({}, result), {}, { children: leveling(node.children, level + 1) });
      }
      return result;
    }));};exports.leveling = leveling;

var flatten = function flatten(treeData, parentKey) {return (
    treeData.flatMap(function (node, index) {var _node$key;
      var key = (_node$key = node.key) !== null && _node$key !== void 0 ? _node$key : getPosition(parentKey !== null && parentKey !== void 0 ? parentKey : '0', index);
      var updatedNode = parentKey ? _objectSpread(_objectSpread({}, node), {}, { key: key, parentKey: parentKey }) : _objectSpread(_objectSpread({}, node), {}, { key: key });

      if (node.children) {
        var children = flatten(node.children, key);
        return [_objectSpread(_objectSpread({}, updatedNode), {}, { children: children })].concat(_toConsumableArray(children));
      }
      return updatedNode;
    }));};exports.flatten = flatten;

var constructTreeNodes = function constructTreeNodes(treeData) {return flatten(leveling(treeData, 0));};exports.constructTreeNodes = constructTreeNodes;

var getCurrentSelectedNodes = function getCurrentSelectedNodes(nodes, selectedNodes) {return (
    nodes.filter(function (node) {return selectedNodes.some(function (selectedNode) {return selectedNode.value === node.value;});}));};exports.getCurrentSelectedNodes = getCurrentSelectedNodes;

var checkIsSelectedNode = function checkIsSelectedNode(currentSelectedNodes, selectedItem) {return (
    currentSelectedNodes.some(
    function (selectedNode) {return selectedNode.key === selectedItem.key || selectedNode.key === selectedItem.parentKey;}));};exports.checkIsSelectedNode = checkIsSelectedNode;


var checkIsAllNodesSelected = function checkIsAllNodesSelected(nodes, selectedNodes) {return (
    nodes.
    filter(function (node) {return node.level === 0;}).
    every(function (node) {return checkIsSelectedNode(getCurrentSelectedNodes(nodes, selectedNodes), node);}));};exports.checkIsAllNodesSelected = checkIsAllNodesSelected;

var checkIsExpandedNode = function checkIsExpandedNode(expandedKeys, key) {return (
    expandedKeys.some(function (expandedKey) {return expandedKey === key;}));};exports.checkIsExpandedNode = checkIsExpandedNode;