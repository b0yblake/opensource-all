"use strict";require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.TreeNode = void 0;
var _styledComponents = _interopRequireDefault(require("styled-components"));



var _checkbox = require("../../../lib/components/checkbox");
var _icon = require("../../../lib/components/icon");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));
var _typography = require("../../../lib/typography");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var TreeNodeListItem = _styledComponents.default.li.withConfig({ displayName: "treeNode__TreeNodeListItem", componentId: "sc-1advvyx-0" })(["display:flex;flex-direction:row;align-items:center;height:32px;padding-left:", "px;"],




function (_ref) {var level = _ref.level;return 4 + level * 40;});


var TreeNodeFlatListItem = _styledComponents.default.li.withConfig({ displayName: "treeNode__TreeNodeFlatListItem", componentId: "sc-1advvyx-1" })(["padding:6px 16px;", ";color:", ";white-space:nowrap;text-overflow:ellipsis;overflow:hidden;cursor:pointer;&:hover{background:", ";}"],


_typography.Subtitles['subtitle-01'],
(0, _cssVariables.default)('neutral-10'),







(0, _cssVariables.default)('neutral-1'));



var TreeNodeCheckbox = (0, _styledComponents.default)(_checkbox.Checkbox).withConfig({ displayName: "treeNode__TreeNodeCheckbox", componentId: "sc-1advvyx-2" })(["margin-right:8px;label{min-width:0;text-overflow:ellipsis;overflow:hidden;}"]);









var ExpandIcon = (0, _styledComponents.default)(_icon.Icon).withConfig({ displayName: "treeNode__ExpandIcon", componentId: "sc-1advvyx-3" })(["margin-left:4px;cursor:pointer;"]);

















var TreeNode = function TreeNode(_ref2)








{var node = _ref2.node,isSelected = _ref2.isSelected,isIndeterminate = _ref2.isIndeterminate,isExpanded = _ref2.isExpanded,onSelect = _ref2.onSelect,onExpand = _ref2.onExpand,nodeToElement = _ref2.nodeToElement,getItemProps = _ref2.getItemProps;
  var handleNodeWrapperClick = function handleNodeWrapperClick() {
    onSelect(node);
  };

  var handleExpandIconClick = function handleExpandIconClick(event) {
    event.stopPropagation();
    onExpand(node.key);
  };

  var Container = node.children || node.level > 0 ? TreeNodeListItem : TreeNodeFlatListItem;

  return /*#__PURE__*/(
    (0, _jsxRuntime.jsxs)(Container, _objectSpread(_objectSpread({
      level: node.level },
    getItemProps === null || getItemProps === void 0 ? void 0 : getItemProps({ item: node, onClick: handleNodeWrapperClick })), {}, {
      "data-test-id": "TreeNodeListItem", children: [

      node.children && /*#__PURE__*/
      (0, _jsxRuntime.jsx)(ExpandIcon, {
        icon: isExpanded ? 'input-arrow-up' : 'input-arrow-down',
        size: 20,
        "data-test-id": "ExpandIcon",
        onClick: handleExpandIconClick }), /*#__PURE__*/


      (0, _jsxRuntime.jsx)(TreeNodeCheckbox, {
        label: nodeToElement ? nodeToElement(node) : node.label,
        checked: isSelected,
        indeterminate: isIndeterminate,
        "data-test-id": "TreeNodeCheckbox" })] })));



};exports.TreeNode = TreeNode;