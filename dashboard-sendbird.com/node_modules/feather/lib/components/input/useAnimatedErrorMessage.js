"use strict";require("core-js/modules/es.symbol.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.from.js");Object.defineProperty(exports, "__esModule", { value: true });exports.useAnimatedErrorMessage = void 0;var _react = require("react");
var _useLatestValue = require("../../../lib/utils/useLatestValue");function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

var transitionDuration = 0.2;

var useAnimatedErrorMessage = function useAnimatedErrorMessage(hasError, message) {
  var isUnmounted = (0, _react.useRef)(false);

  var _useState = (0, _react.useState)({
    hasNegativeTranslateY: !hasError,
    visibleMessage: hasError ? message : null }),_useState2 = _slicedToArray(_useState, 2),state = _useState2[0],setResult = _useState2[1];

  var lastSetTimeoutId = (0, _react.useRef)(null);

  var errorMessage = hasError ? message : null;
  var latestErrorMessage = (0, _useLatestValue.useLatestValue)(errorMessage);

  (0, _react.useEffect)(function () {
    return function () {
      isUnmounted.current = true;
    };
  }, []);

  (0, _react.useEffect)(function () {
    if (errorMessage) {
      setResult({ hasNegativeTranslateY: false, visibleMessage: errorMessage });
      return;
    }

    // update the position only immediately.
    setResult(function (currentResult) {return {
        hasNegativeTranslateY: true,
        visibleMessage: currentResult.visibleMessage };});


    lastSetTimeoutId.current != null && clearTimeout(lastSetTimeoutId.current);

    // update the text after the transition.
    lastSetTimeoutId.current = window.setTimeout(function () {
      if (isUnmounted.current) {
        return;
      }

      setResult({
        hasNegativeTranslateY: !latestErrorMessage.current,
        visibleMessage: latestErrorMessage.current });

    }, transitionDuration * 1000);
  }, [errorMessage, latestErrorMessage]);

  return state;
};exports.useAnimatedErrorMessage = useAnimatedErrorMessage;