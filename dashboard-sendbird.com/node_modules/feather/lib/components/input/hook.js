"use strict";require("core-js/modules/es.symbol.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.array.from.js");require("core-js/modules/es.object.keys.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.useForm = exports.useField = void 0;require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.regexp.to-string.js");require("core-js/modules/es.function.name.js");var _react = require("react");function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}var








FieldRefValueType;(function (FieldRefValueType) {FieldRefValueType[FieldRefValueType["Text"] = 0] = "Text";FieldRefValueType[FieldRefValueType["Checkbox"] = 1] = "Checkbox";FieldRefValueType[FieldRefValueType["Toggle"] = 2] = "Toggle";FieldRefValueType[FieldRefValueType["Else"] = 3] = "Else";})(FieldRefValueType || (FieldRefValueType = {}));





















































var isChangeEvent = function isChangeEvent(event) {
  return event && event.target && typeof event.target.value === 'string';
};

var isEventTargetCheckbox = function isEventTargetCheckbox(eventTarget) {
  return eventTarget.type === 'checkbox';
};

var useField = function useField(
name,
form,
options)
{
  var defaultValue = options.defaultValue,placeholder = options.placeholder,validate = options.validate,_options$isControlled = options.isControlled,isControlled = _options$isControlled === void 0 ? false : _options$isControlled,optionsOnChange = options.onChange;

  var _useState = (0, _react.useState)(defaultValue),_useState2 = _slicedToArray(_useState, 2),initialValue = _useState2[0],setInitialValue = _useState2[1];
  var _useState3 = (0, _react.useState)(defaultValue),_useState4 = _slicedToArray(_useState3, 2),value = _useState4[0],setValue = _useState4[1];
  var _useState5 = (0, _react.useState)(false),_useState6 = _slicedToArray(_useState5, 2),updatable = _useState6[0],setUpdatable = _useState6[1];
  var _useState7 = (0, _react.useState)(''),_useState8 = _slicedToArray(_useState7, 2),serverError = _useState8[0],setServerError = _useState8[1];
  var _useState9 = (0, _react.useState)({
    hasError: false,
    message: '' }),_useState10 = _slicedToArray(_useState9, 2),validationError = _useState10[0],setValidationError = _useState10[1];


  var ref = (0, _react.useRef)(null);
  var onServerErrorChange = (0, _react.useRef)(function () {});

  var setRefValue = function setRefValue(value) {
    if (!ref.current) {
      return;
    }

    if (typeof value === 'boolean') {
      if (typeof ref.current.getAttribute('checked') === 'boolean') {
        ref.current.setAttribute('checked', value.toString());
      }
      if (ref.current.getAttribute('role') === 'switch') {
        ref.current.setAttribute('aria-checked', value.toString());
      }
    } else {
      ref.current.value = value;
    }
  };

  var refValueType = function () {
    if (ref.current && ref.current.getAttribute('role') === 'switch') {
      return FieldRefValueType.Toggle;
    }

    if (typeof value === 'boolean') {
      return FieldRefValueType.Checkbox;
    }

    if (typeof value === 'string') {
      return FieldRefValueType.Text;
    }

    return FieldRefValueType.Else;
  }();

  var getValue = (0, _react.useCallback)(function () {
    var getRefValue = function getRefValue() {
      var currentRefValue;

      if (!ref.current) {
        return refValueType === FieldRefValueType.Toggle || refValueType === FieldRefValueType.Checkbox ? false : '';
      }

      if (refValueType === FieldRefValueType.Toggle) {
        currentRefValue = ref.current.getAttribute('aria-checked') === 'true';
      }

      if (refValueType === FieldRefValueType.Checkbox) {
        currentRefValue = ref.current.getAttribute('checked');
      }

      if (refValueType === FieldRefValueType.Text) {
        currentRefValue = ref.current.value;
      }

      return currentRefValue;
    };

    return isControlled ? value : getRefValue();
  }, [isControlled, value, refValueType]);

  (0, _react.useEffect)(function () {
    setRefValue(defaultValue);
    // setValue(defaultValue);
    // setUpdatable(false);
    // setInitialValue(defaultValue);
  }, [defaultValue]);

  // when serverError occurs, updatable should be reverted to its previous value (right before form.onSubmit)
  (0, _react.useEffect)(function () {
    onServerErrorChange.current = function () {
      var prevUpdatable = defaultValue !== getValue();
      setUpdatable(prevUpdatable);
    };
  }, [defaultValue, getValue]);

  (0, _react.useEffect)(function () {
    onServerErrorChange.current();
  }, [serverError]);

  var error = validationError || {
    hasError: !!serverError,
    message: serverError || '' };


  var field = (0, _react.useMemo)(function () {
    var validateOnChange = function validateOnChange(value) {
      var error = validate ? validate(value) : null;
      if (error) {
        if (validationError.message !== error || !validationError.hasError) {
          setValidationError({ hasError: true, message: error });
        }
      } else {
        if (validationError.hasError) {
          setValidationError(_objectSpread(_objectSpread({}, validationError), {}, { hasError: false }));
        }
      }
    };

    var onChange = function onChange(event) {
      if (!isChangeEvent(event)) {
        return;
      }

      var newValue = isEventTargetCheckbox(event.target) ? event.target.checked : event.target.value;

      var nextUpdatable = initialValue !== newValue;
      if (nextUpdatable !== updatable) {
        setUpdatable(nextUpdatable);
      }

      if (isControlled) {
        setValue(newValue);
      }

      optionsOnChange && optionsOnChange(newValue);
      validateOnChange(newValue);
    };

    return {
      isControlled: isControlled,
      ref: ref,
      name: name,
      value: value,
      placeholder: placeholder,
      error: error,
      updatable: updatable,
      setUpdatable: setUpdatable,
      setInitialValue: setInitialValue,
      setValidationError: setValidationError,
      setServerError: setServerError,
      getValue: getValue,
      validate: validate,
      reset: function reset() {
        if (isControlled) {
          setValue(defaultValue);
        }
        setRefValue(defaultValue);
        setUpdatable(false);
        setValidationError({ hasError: false, message: '' });
        setServerError('');
      },
      onChange: onChange,
      updateValue: function updateValue(value) {
        if (isControlled) {
          setValue(value);
        }
        setRefValue(value);

        if (!!value && _typeof(value) === 'object') {
          var nextUpdatable = value.value !== initialValue.value;
          if (nextUpdatable !== updatable) {
            setUpdatable(nextUpdatable);
          }
        } else {
          var _nextUpdatable = initialValue !== value;
          if (_nextUpdatable !== updatable) {
            setUpdatable(_nextUpdatable);
          }
        }

        validateOnChange(value);
      } };

  }, [
  defaultValue,
  error,
  getValue,
  initialValue,
  isControlled,
  name,
  optionsOnChange,
  placeholder,
  updatable,
  validate,
  validationError,
  value]);


  form.addField(field);
  return field;
};exports.useField = useField;

var useForm = function useForm(options)


{
  var onSubmit = options.onSubmit,onReset = options.onReset;
  var onSubmitRef = (0, _react.useRef)(onSubmit);
  var onResetRef = (0, _react.useRef)(onReset);
  var fields = [];
  var _useState11 = (0, _react.useState)(false),_useState12 = _slicedToArray(_useState11, 2),disabled = _useState12[0],setDisabled = _useState12[1];

  (0, _react.useEffect)(function () {
    onSubmitRef.current = onSubmit;
  }, [onSubmit]);

  (0, _react.useEffect)(function () {
    onResetRef.current = onReset;
  }, [onReset]);

  return (0, _react.useMemo)(function () {
    return {
      addField: function addField(field) {return fields.push(field);},
      onSubmit: function onSubmit(e) {
        e && e.preventDefault();

        var _fields$reduce = fields.reduce(
        function (_ref, field) {var _ref2 = _slicedToArray(_ref, 2),accFormData = _ref2[0],accFirstInvalidField = _ref2[1];
          var value = field.getValue();
          accFormData[field.name] = value;

          var error = field.validate ? field.validate(value) : null;
          if (error) {
            field.setValidationError({ hasError: true, message: error });
            return [accFormData, accFirstInvalidField || field];
          }

          return [accFormData, accFirstInvalidField];
        },
        [{}, null]),_fields$reduce2 = _slicedToArray(_fields$reduce, 2),formData = _fields$reduce2[0],firstInvalidField = _fields$reduce2[1];


        if (firstInvalidField) {
          if (firstInvalidField.ref.current) {
            firstInvalidField.ref.current.focus();
          }
          return;
        }

        onSubmitRef.current(formData);
      },
      onSuccess: function onSuccess() {
        fields.forEach(function (field) {
          field.setInitialValue(field.getValue());
          field.setUpdatable(false);
        });
      },
      reset: function reset() {
        fields.forEach(function (field) {return field.reset();});
        onResetRef.current && onResetRef.current();
      },
      disabled: disabled,
      setDisabled: setDisabled };

  }, [disabled, fields]);
};exports.useForm = useForm;