"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}require("core-js/modules/es.symbol.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.from.js");require("core-js/modules/es.weak-map.js");require("core-js/modules/es.object.get-own-property-descriptor.js");Object.defineProperty(exports, "__esModule", { value: true });exports.LNBMenuItem = exports.LabelItem = exports.MenuItemReactRouterLink = exports.MenuItemLink = exports.MenuItem = exports.menuItemCSS = exports.MenuIcon = exports.COLLAPSED_ANIMATION_DURATION_SECOND = void 0;require("core-js/modules/es.array.map.js");var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _badge = require("../../../lib/components/badge");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));

var _animation = require("../../animation");
var _types = require("../../types");
var _leftNavigationBar = require("../../types/components/leftNavigationBar");




var _icon = require("../icon");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}









var ITEM_STATE_TRANSITION_DURATION_SECOND = 0.1;
var COLLAPSED_ANIMATION_DURATION_SECOND = 0.15;exports.COLLAPSED_ANIMATION_DURATION_SECOND = COLLAPSED_ANIMATION_DURATION_SECOND;

var MenuIconBox = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__MenuIconBox", componentId: "sc-96tf2j-0" })(["flex:none;position:relative;margin-right:18px;width:20px;height:20px;"]);







var MenuBadge = (0, _styledComponents.default)(_badge.Badge).withConfig({ displayName: "LNBMenuItem__MenuBadge", componentId: "sc-96tf2j-1" })(["position:absolute;left:10px;top:-8px;padding:0 4px;"]);






var SubMenuBadge = (0, _styledComponents.default)(_badge.Badge).withConfig({ displayName: "LNBMenuItem__SubMenuBadge", componentId: "sc-96tf2j-2" })(["position:absolute;padding:0 4px;left:10px;"]);





var SubMenuBadgeArea = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__SubMenuBadgeArea", componentId: "sc-96tf2j-3" })(["flex:none;position:relative;width:20px;height:20px;"]);






var MenuIcon = (0, _styledComponents.default)(_icon.Icon).withConfig({ displayName: "LNBMenuItem__MenuIcon", componentId: "sc-96tf2j-4" })(["flex:none;margin-right:18px;transition:", "s fill ", ";"],


ITEM_STATE_TRANSITION_DURATION_SECOND, _animation.transitionDefault);exports.MenuIcon = MenuIcon;


var menuItemCSS = function menuItemCSS(props) {return (0, _styledComponents.css)(["position:relative;flex:none;display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center;height:40px;padding:0 16px 0 18px;font-size:14px;line-height:20px;letter-spacing:-0.1px;font-weight:500;text-decoration:none !important;white-space:nowrap;color:", ";user-select:none;outline:none;transition:", "s ", ";transition-property:color,background-color;&:hover{color:", ";background-color:", ";}", " ", ""],














  (0, _cssVariables.default)('neutral-7'),


  ITEM_STATE_TRANSITION_DURATION_SECOND, _animation.transitionDefault,



  (0, _cssVariables.default)('neutral-7'),
  (0, _cssVariables.default)('neutral-3'),


  props.$isInteractive && (0,
  _styledComponents.css)(["cursor:pointer;"]),



  props.$isActive && (0,
  _styledComponents.css)(["font-weight:600 !important;color:", " !important;background-color:", ";", "{fill:", ";}"],


  (0, _cssVariables.default)('purple-7'),


  (0, _cssVariables.default)('purple-2'),

  MenuIcon,
  (0, _cssVariables.default)('purple-7')));};exports.menuItemCSS = menuItemCSS;




var subMenuItemCSS = function subMenuItemCSS(props) {return (0, _styledComponents.css)(["", ";height:32px;", ""],
  menuItemCSS,


  props.$isActive && (0,
  _styledComponents.css)(["background-color:transparent;"]));};




var MenuItem = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__MenuItem", componentId: "sc-96tf2j-5" })(["", ""],
menuItemCSS);exports.MenuItem = MenuItem;


var MenuItemLink = _styledComponents.default.a.withConfig({ displayName: "LNBMenuItem__MenuItemLink", componentId: "sc-96tf2j-6" })(["", ""],
menuItemCSS);exports.MenuItemLink = MenuItemLink;


var MenuItemReactRouterLink = (0, _styledComponents.default)(_reactRouterDom.Link).withConfig({ displayName: "LNBMenuItem__MenuItemReactRouterLink", componentId: "sc-96tf2j-7" })(["", ""],
menuItemCSS);exports.MenuItemReactRouterLink = MenuItemReactRouterLink;


var SubMenuItem = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__SubMenuItem", componentId: "sc-96tf2j-8" })(["", ""],
subMenuItemCSS);


var SubMenuItemLink = _styledComponents.default.a.withConfig({ displayName: "LNBMenuItem__SubMenuItemLink", componentId: "sc-96tf2j-9" })(["", ""],
subMenuItemCSS);


var SubMenuItemReactRouterLink = (0, _styledComponents.default)(_reactRouterDom.Link).withConfig({ displayName: "LNBMenuItem__SubMenuItemReactRouterLink", componentId: "sc-96tf2j-10" })(["", ""],
subMenuItemCSS);


var CollapsedIcon = (0, _styledComponents.default)(_icon.Icon).withConfig({ displayName: "LNBMenuItem__CollapsedIcon", componentId: "sc-96tf2j-11" })(["position:absolute;left:0;transition:0.3s transform ", ";transform:rotate(0deg);fill:", ";", ";", ""],


_animation.transitionDefault,

(0, _cssVariables.default)('neutral-7'),

function (props) {return (
    props.isCollapsed && (0,
    _styledComponents.css)(["transform:rotate(-90deg);"]));},



function (props) {return (
    props.isActive && (0,
    _styledComponents.css)(["fill:", ";"],
    (0, _cssVariables.default)('purple-7')));});



var LabelItem = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__LabelItem", componentId: "sc-96tf2j-12" })(["display:flex;flex:none;align-items:center;padding:8px 16px 8px 18px;font-size:13px;line-height:16px;font-weight:600;color:", ";white-space:nowrap;height:32px;user-select:none;transition:", "s ", ";transition-property:color,height,padding;"],







(0, _cssVariables.default)('neutral-7'),



COLLAPSED_ANIMATION_DURATION_SECOND, _animation.transitionDefault);exports.LabelItem = LabelItem;



var DividerItem = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__DividerItem", componentId: "sc-96tf2j-13" })(["flex:none;background-color:", ";width:100%;height:1px;margin:8px 0;"],

(0, _cssVariables.default)('neutral-3'));





var SubItemList = _styledComponents.default.div.withConfig({ displayName: "LNBMenuItem__SubItemList", componentId: "sc-96tf2j-14" })(["margin-bottom:8px;"]);












var LNBMenuItem = /*#__PURE__*/_react.default.memo(
function (_ref) {var item = _ref.item,activeKey = _ref.activeKey,isLNBCollapsed = _ref.isLNBCollapsed,isLNBHovered = _ref.isLNBHovered,setLNBWidth = _ref.setLNBWidth,collapsedLNBWidth = _ref.collapsedLNBWidth;
  var _useState = (0, _react.useState)(false),_useState2 = _slicedToArray(_useState, 2),isCollapsed = _useState2[0],setIsCollapsed = _useState2[1];

  var handleClickCollapsed = (0, _react.useCallback)(
  function (e) {
    e.preventDefault();
    e.stopPropagation();
    setIsCollapsed(!isCollapsed);
  },
  [isCollapsed]);


  switch (item.type) {
    case _leftNavigationBar.LeftNavigationBarItemType.Item:{var _ref2;
        var
        key =










        item.key,href = item.href,icon = item.icon,badgeCount = item.badgeCount,label = item.label,labelSuffix = item.labelSuffix,useReactRouterLink = item.useReactRouterLink,target = item.target,itemOnClick = item.onClick,id = item.id,subMenus = item.subMenus;

        var hasSubMenu = subMenus && subMenus.length > 1;
        var isActive = (_ref2 = activeKey === key || (subMenus === null || subMenus === void 0 ? void 0 : subMenus.some(function (menu) {return menu.key === activeKey;}))) !== null && _ref2 !== void 0 ? _ref2 : false;
        var totalBadgeCount = hasSubMenu ?
        subMenus === null || subMenus === void 0 ? void 0 : subMenus.reduce(function (acc, subMenu) {var _subMenu$badgeCount;
          return acc + ((_subMenu$badgeCount = subMenu.badgeCount) !== null && _subMenu$badgeCount !== void 0 ? _subMenu$badgeCount : 0);
        }, badgeCount !== null && badgeCount !== void 0 ? badgeCount : 0) :
        badgeCount;
        var showBadgeCount =
        isLNBCollapsed && !isLNBHovered || !!(hasSubMenu ? isCollapsed && totalBadgeCount : totalBadgeCount);
        var children = /*#__PURE__*/
        (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, { children: [
          hasSubMenu && /*#__PURE__*/
          (0, _jsxRuntime.jsx)(CollapsedIcon, {
            "data-test-id": "CollapsedIcon",
            icon: "sorting-descend",
            size: 20,
            onClick: handleClickCollapsed,
            isCollapsed: isCollapsed,
            isActive: isActive }), /*#__PURE__*/


          (0, _jsxRuntime.jsxs)(MenuIconBox, { children: [/*#__PURE__*/
            (0, _jsxRuntime.jsx)(MenuIcon, { icon: icon, size: 20, color: (0, _cssVariables.default)('neutral-7') }),
            showBadgeCount && typeof totalBadgeCount === 'number' && totalBadgeCount > 0 && /*#__PURE__*/
            (0, _jsxRuntime.jsx)(MenuBadge, { count: totalBadgeCount, color: "red", variant: _types.BadgeVariant.Dark, max: 99 })] }),


          label,
          labelSuffix] });



        var onClick = function onClick(e) {
          e.stopPropagation();
          if (hasSubMenu) {var _subMenus$, _subMenus$$onClick;
            subMenus && ((_subMenus$ = subMenus[0]) === null || _subMenus$ === void 0 ? void 0 : (_subMenus$$onClick = _subMenus$.onClick) === null || _subMenus$$onClick === void 0 ? void 0 : _subMenus$$onClick.call(_subMenus$, e));
            setIsCollapsed(false);
          } else {
            itemOnClick && itemOnClick(e);
          }

          if (isLNBCollapsed) {
            /**
             * If an item is clicked when the state of LNB is collapsed, shrink the LNB back to collapsedWidth,
             * unless the click event occurred on the icon on the item.
             */
            if (e.clientX - e.currentTarget.getBoundingClientRect().left > collapsedLNBWidth) {
              setLNBWidth(collapsedLNBWidth);
            }
          }
        };

        var result;
        if (href) {
          if (useReactRouterLink) {
            result = /*#__PURE__*/
            (0, _jsxRuntime.jsx)(MenuItemReactRouterLink, {

              to: href,
              target: target,
              $isActive: isActive,
              $isInteractive: true,
              onClick: onClick,
              children: children,
              id: id }, key);


          } else {
            result = /*#__PURE__*/
            (0, _jsxRuntime.jsx)(MenuItemLink, {

              href: href,
              target: target,
              $isActive: isActive,
              $isInteractive: true,
              onClick: onClick,
              children: children,
              id: id }, key);


          }
        } else {
          result = /*#__PURE__*/
          (0, _jsxRuntime.jsx)(MenuItem, {

            role: "link",
            $isActive: isActive,
            $isInteractive: !!onClick,
            onClick: itemOnClick ? onClick : undefined,
            children: children,
            id: id }, key);


        }

        return /*#__PURE__*/(
          (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, { children: [
            result,
            subMenus && !isCollapsed && (!isLNBCollapsed || isLNBHovered) && /*#__PURE__*/
            (0, _jsxRuntime.jsx)(SubItemList, { children:
              subMenus === null || subMenus === void 0 ? void 0 : subMenus.map(function (subMenu) {return /*#__PURE__*/(
                  (0, _jsxRuntime.jsx)(LNBMenuItem, {

                    item: subMenu,
                    activeKey: activeKey,
                    isLNBCollapsed: false,
                    isLNBHovered: isLNBCollapsed,
                    setLNBWidth: setLNBWidth,
                    collapsedLNBWidth: collapsedLNBWidth }, subMenu.key));}) })] }));






      }
    case _leftNavigationBar.LeftNavigationBarItemType.SubItem:{
        var _key = item.key,_href = item.href,_badgeCount = item.badgeCount,_label = item.label,_labelSuffix = item.labelSuffix,_useReactRouterLink = item.useReactRouterLink,_itemOnClick = item.onClick,_id = item.id;
        var _children = /*#__PURE__*/
        (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, { children: [/*#__PURE__*/
          (0, _jsxRuntime.jsx)(MenuIconBox, {}),

          _label, /*#__PURE__*/
          (0, _jsxRuntime.jsx)(SubMenuBadgeArea, { children:
            typeof _badgeCount === 'number' && _badgeCount > 0 && /*#__PURE__*/
            (0, _jsxRuntime.jsx)(SubMenuBadge, { count: _badgeCount, color: "red", variant: _types.BadgeVariant.Dark, max: 99 }) }),


          _labelSuffix] });



        var _onClick = function _onClick(e) {
          _itemOnClick && _itemOnClick(e);
          if (isLNBCollapsed) {
            /**
             * If an item is clicked when the state of LNB is collapsed, shrink the LNB back to collapsedWidth,
             * unless the click event occurred on the icon on the item.
             */
            if (e.clientX - e.currentTarget.getBoundingClientRect().left > collapsedLNBWidth) {
              setLNBWidth(collapsedLNBWidth);
            }
          }
        };

        if (_href) {
          if (_useReactRouterLink) {
            return /*#__PURE__*/(
              (0, _jsxRuntime.jsx)(SubMenuItemReactRouterLink, {

                to: _href,
                $isActive: activeKey === _key,
                $isInteractive: true,
                onClick: _onClick,
                children: _children,
                id: _id }, _key));


          }
          return /*#__PURE__*/(
            (0, _jsxRuntime.jsx)(SubMenuItemLink, {

              href: _href,
              $isActive: activeKey === _key,
              $isInteractive: true,
              onClick: _onClick,
              children: _children,
              id: _id }, _key));


        }
        return /*#__PURE__*/(
          (0, _jsxRuntime.jsx)(SubMenuItem, {

            role: "link",
            $isActive: activeKey === _key,
            $isInteractive: !!_onClick,
            onClick: _itemOnClick ? _onClick : undefined,
            children: _children,
            id: _id }, _key));


      }
    case _leftNavigationBar.LeftNavigationBarItemType.Label:
      if (isLNBCollapsed) return null;
      return /*#__PURE__*/(
        (0, _jsxRuntime.jsxs)(LabelItem, { children: [
          item.label,
          item.labelSuffix] }, item.key));


    case _leftNavigationBar.LeftNavigationBarItemType.Divider:
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(DividerItem, {});
    default:
      return null;}

});exports.LNBMenuItem = LNBMenuItem;