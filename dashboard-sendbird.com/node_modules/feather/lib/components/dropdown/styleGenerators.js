"use strict";require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.getToggleColors = exports.generateToggleArrowStyle = exports.generateToggleContentSizeStyle = exports.generateToggleContainerSizeStyle = exports.defaultDropdownSizeStyleMap = void 0;var _styledComponents = require("styled-components");

var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));

var _typography = require("../../../lib/typography");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var defaultDropdownSizeStyleMap = {
  small: {
    contentMarginLeft: 16,
    paddingRight: 12,
    height: 32 },

  medium: {
    contentMarginLeft: 16,
    paddingRight: 12,
    height: 40 } };exports.defaultDropdownSizeStyleMap = defaultDropdownSizeStyleMap;



var inlineDropdownSizeStyleMap = {
  small: {
    contentMarginLeft: 8,
    paddingRight: 4,
    height: 32 },

  medium: defaultDropdownSizeStyleMap['medium']
  // FIXME: only small inline is defined by design team
};

var generateToggleContainerSizeStyle = function generateToggleContainerSizeStyle(_ref) {var
  size = _ref.size,
  variant = _ref.variant;return (0,



  _styledComponents.css)(["padding-top:0;padding-bottom:0;", ""],


  variant === 'default' ? (0,
  _styledComponents.css)(["min-width:80px;height:", "px;"],

  defaultDropdownSizeStyleMap[size].height) : (0,

  _styledComponents.css)(["height:", "px;"],
  inlineDropdownSizeStyleMap[size].height));};exports.generateToggleContainerSizeStyle = generateToggleContainerSizeStyle;



var generateToggleContentSizeStyle = function generateToggleContentSizeStyle(_ref2) {var size = _ref2.size,variant = _ref2.variant;
  var sizeStyleMap = variant === 'default' ? defaultDropdownSizeStyleMap : inlineDropdownSizeStyleMap;

  return (0, _styledComponents.css)(["", ";margin-left:", "px;"],
  _typography.Body['body-short-01'],
  sizeStyleMap[size].contentMarginLeft);

};exports.generateToggleContentSizeStyle = generateToggleContentSizeStyle;

var generateToggleArrowStyle = (0, _styledComponents.css)(["margin-right:", "px;"],
function (_ref3) {var dropdownSize = _ref3.dropdownSize,variant = _ref3.variant;return (
    variant === 'default' ?
    defaultDropdownSizeStyleMap[dropdownSize].paddingRight :
    inlineDropdownSizeStyleMap[dropdownSize].paddingRight);});exports.generateToggleArrowStyle = generateToggleArrowStyle;






var getToggleColors = function getToggleColors(variant, toggleTheme) {
  var toggleColors = null;
  switch (variant) {
    case 'inline':
      toggleColors = {
        contentColor: (0, _cssVariables.default)('neutral-10'),
        hoverContentColor: (0, _cssVariables.default)('neutral-10'),
        activeContentColor: (0, _cssVariables.default)('neutral-10'),
        disabledContentColor: (0, _cssVariables.default)('neutral-6'),
        bgColor: 'transparent',
        hoverBgColor: (0, _cssVariables.default)('neutral-2'),
        activeBgColor: (0, _cssVariables.default)('purple-2'),
        disabledBgColor: 'transparent',
        borderColor: 'transparent',
        hoverBorderColor: 'transparent',
        activeBorderColor: 'transparent',
        disabledBorderColor: 'transparent',
        pressedContentColor: (0, _cssVariables.default)('purple-7'),
        pressedBorderColor: 'transparent',
        pressedBgColor: (0, _cssVariables.default)('purple-2'),
        readOnlyBgColor: 'transparent',
        readOnlyContentColor: (0, _cssVariables.default)('neutral-7'),
        readOnlyArrowColor: (0, _cssVariables.default)('neutral-9'),
        focusOutlineColor: (0, _cssVariables.default)('purple-7') };

      break;
    default:
      toggleColors = {
        contentColor: (0, _cssVariables.default)('neutral-10'),
        hoverContentColor: (0, _cssVariables.default)('purple-7'),
        activeContentColor: (0, _cssVariables.default)('purple-7'),
        disabledContentColor: (0, _cssVariables.default)('neutral-5'),
        bgColor: 'transparent',
        hoverBgColor: 'transparent',
        activeBgColor: (0, _cssVariables.default)('purple-2'),
        disabledBgColor: 'transparent',
        borderColor: (0, _cssVariables.default)('neutral-4'),
        hoverBorderColor: (0, _cssVariables.default)('purple-7'),
        activeBorderColor: (0, _cssVariables.default)('purple-7'),
        disabledBorderColor: (0, _cssVariables.default)('neutral-2'),
        pressedContentColor: (0, _cssVariables.default)('purple-7'),
        pressedBorderColor: (0, _cssVariables.default)('purple-7'),
        pressedBgColor: (0, _cssVariables.default)('purple-2'),
        readOnlyBgColor: (0, _cssVariables.default)('neutral-2'),
        readOnlyContentColor: (0, _cssVariables.default)('neutral-7'),
        readOnlyArrowColor: (0, _cssVariables.default)('neutral-9'),
        focusOutlineColor: (0, _cssVariables.default)('purple-7') };

      break;}

  return _objectSpread(_objectSpread({},
  toggleColors),
  toggleTheme);

};exports.getToggleColors = getToggleColors;