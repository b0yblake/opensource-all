"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}require("core-js/modules/es.symbol.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.from.js");require("core-js/modules/es.object.keys.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");require("core-js/modules/es.weak-map.js");Object.defineProperty(exports, "__esModule", { value: true });exports.Dropdown = void 0;require("core-js/modules/es.array.map.js");var _react = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _reactPopper = require("react-popper");
var _reactWindow = require("react-window");
var _styledComponents = _interopRequireDefault(require("styled-components"));

var _downshift = _interopRequireDefault(require("downshift"));

var _mixins = require("../../../lib/mixins");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));

var _useOnChangeTrigger = require("../../../lib/utils/useOnChangeTrigger");

var _button = require("../button");
var _ScrollBar = require("../ScrollBar");
var _constants = require("./constants");
var _dropdownContext = require("./dropdownContext");
var _dropdownMenuItem = require("./dropdownMenuItem");
var _DropdownMenuItemList = require("./DropdownMenuItemList");
var _DropdownToggleButton = require("./DropdownToggleButton");
var _styleGenerators = require("./styleGenerators");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

var SearchInput = _styledComponents.default.div.withConfig({ displayName: "Dropdown__SearchInput", componentId: "o0rhib-0" })(["display:flex;align-items:center;padding:0 4px 0 16px;border-bottom:1px solid ", ";> input{width:100%;height:40px;border:none;color:", ";font-size:14px;outline:none;-webkit-appearance:none;", "}"],



(0, _cssVariables.default)('neutral-3'),




(0, _cssVariables.default)('neutral-10'),



_mixins.placeholder);



var SearchInputIconButton = (0, _styledComponents.default)(_button.IconButton).withConfig({ displayName: "Dropdown__SearchInputIconButton", componentId: "o0rhib-1" })(["flex:none;"]);









var ToggleContent = _styledComponents.default.div.withConfig({ displayName: "Dropdown__ToggleContent", componentId: "o0rhib-2" })(["", " flex:1;text-align:left;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;"],



_styleGenerators.generateToggleContentSizeStyle);








var Section = _styledComponents.default.div.withConfig({ displayName: "Dropdown__Section", componentId: "o0rhib-3" })(["& + &{margin-top:8px;padding-top:8px;border-top:1px solid ", ";}"],



(0, _cssVariables.default)('neutral-3'));



var DropdownWrapper = _styledComponents.default.div.withConfig({ displayName: "Dropdown__DropdownWrapper", componentId: "o0rhib-4" })(["position:relative;width:", ";border-radius:4px;&:focus{border:2px solid ", ";}"],

function (props) {
  if (props.width) {
    if (typeof props.width === 'number') {
      return "".concat(props.width, "px");
    }

    return props.width;
  }
  return null;
},


(0, _cssVariables.default)('purple-7'));



var DropdownHeaderContainer = _styledComponents.default.div.withConfig({ displayName: "Dropdown__DropdownHeaderContainer", componentId: "o0rhib-5" })(["display:flex;align-items:center;justify-content:flex-start;padding:4px;border-bottom:1px solid ", ";"],




(0, _cssVariables.default)('neutral-3'));


var DropdownFooterContainer = _styledComponents.default.div.withConfig({ displayName: "Dropdown__DropdownFooterContainer", componentId: "o0rhib-6" })(["display:flex;align-items:center;justify-content:flex-start;padding:8px 4px;border-top:1px solid ", ";"],




(0, _cssVariables.default)('neutral-3'));


var WindowInnerComponent = _styledComponents.default.div.withConfig({ displayName: "Dropdown__WindowInnerComponent", componentId: "o0rhib-7" })(["position:relative;"]);



var DropdownProvider = function DropdownProvider(_ref)





{var _children = _ref.children,dropdownProps = _ref.dropdownProps;
  var
  selectedItem =





  dropdownProps.selectedItem,initialSelectedItem = dropdownProps.initialSelectedItem,_dropdownProps$itemTo = dropdownProps.itemToString,_itemToString = _dropdownProps$itemTo === void 0 ? _constants.defaultItemToString : _dropdownProps$itemTo,onItemSelected = dropdownProps.onItemSelected,onChange = dropdownProps.onChange,stateReducer = dropdownProps.stateReducer;
  var _useState = (0, _react.useState)(''),_useState2 = _slicedToArray(_useState, 2),inputValue = _useState2[0],setInputValue = _useState2[1];

  var handleSelect = function handleSelect(item) {
    if (onItemSelected) {
      onItemSelected(item);
    }
  };

  var handleChange = function handleChange(item) {
    if (onChange) {
      onChange(item);
    }
  };

  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_downshift.default, {
      selectedItem: selectedItem,
      initialSelectedItem: initialSelectedItem,
      itemToString: function itemToString(item) {return item == null ? '' : _itemToString(item);},
      onSelect: handleSelect,
      onChange: handleChange,
      inputValue: inputValue,
      stateReducer: stateReducer, children:

      function children(downshiftOptions) {return /*#__PURE__*/(
          (0, _jsxRuntime.jsx)(DropdownWrapper, _objectSpread(_objectSpread({}, downshiftOptions.getRootProps()), {}, { width: dropdownProps.width, children: /*#__PURE__*/
            (0, _jsxRuntime.jsx)(_dropdownContext.DropdownContext.Provider, {
              value: _objectSpread(_objectSpread({},
              downshiftOptions), {}, {
                dropdownProps: dropdownProps,
                setInputValue: setInputValue }), children:


              _children }) })));} }));





};

var DropdownSections = function DropdownSections(_ref2) {var items = _ref2.items;
  var index = -1;
  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, { children:
      items.reduce(function (result, section, sectionIndex) {
        result.push( /*#__PURE__*/
        (0, _jsxRuntime.jsx)(Section, { children:
          section.items.map(function (item) {
            index++;
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_dropdownMenuItem.DropdownMenuItemWithDropdownContext, { item: item, index: index }, index);
          }) }, sectionIndex));


        return result;
      }, []) }));


};

var DropdownToggle = function DropdownToggle() {
  var _useContext =





  (0, _react.useContext)(_dropdownContext.DropdownContext),getToggleButtonProps = _useContext.getToggleButtonProps,selectedItem = _useContext.selectedItem,_useContext$itemToStr = _useContext.itemToString,itemToString = _useContext$itemToStr === void 0 ? _constants.defaultItemToString : _useContext$itemToStr,isOpen = _useContext.isOpen,dropdownProps = _useContext.dropdownProps;
  var _ref3 =














  dropdownProps,dropdownPropsRef = _ref3.ref,_ref3$placeholder = _ref3.placeholder,placeholder = _ref3$placeholder === void 0 ? '' : _ref3$placeholder,_ref3$size = _ref3.size,size = _ref3$size === void 0 ? 'medium' : _ref3$size,width = _ref3.width,_ref3$variant = _ref3.variant,variant = _ref3$variant === void 0 ? 'default' : _ref3$variant,toggleRenderer = _ref3.toggleRenderer,toggleButtonPropsToOverride = _ref3.toggleButtonProps,toggleTheme = _ref3.toggleTheme,_ref3$showArrow = _ref3.showArrow,showArrow = _ref3$showArrow === void 0 ? true : _ref3$showArrow,_ref3$disabled = _ref3.disabled,disabled = _ref3$disabled === void 0 ? false : _ref3$disabled,_ref3$readOnly = _ref3.readOnly,readOnly = _ref3$readOnly === void 0 ? false : _ref3$readOnly,_ref3$hasError = _ref3.hasError,hasError = _ref3$hasError === void 0 ? false : _ref3$hasError,className = _ref3.className,tooltipProps = _ref3.tooltipProps;

  var toggleButtonProps = getToggleButtonProps(_objectSpread({
    disabled: disabled || readOnly,
    onMouseDown: function onMouseDown(event) {
      event.currentTarget.style.boxShadow = '';
    },
    onFocus: function onFocus(event) {
      event.currentTarget.style.boxShadow = '';
    },
    onMouseUp: function onMouseUp(event) {
      event.currentTarget.style.boxShadow = 'none';
    } },
  toggleButtonPropsToOverride));


  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_reactPopper.Reference, { innerRef: dropdownPropsRef, children:
      function children(_ref4) {var ref = _ref4.ref;
        var toggleProps = _objectSpread(_objectSpread({},
        toggleButtonProps), {}, {
          ref: ref,
          toggleTheme: toggleTheme,
          hasError: hasError,
          'aria-pressed': isOpen });

        return /*#__PURE__*/(
          (0, _jsxRuntime.jsx)(_DropdownToggleButton.DropdownToggleButton, _objectSpread(_objectSpread({},
          toggleProps), {}, {
            size: size,
            width: width,
            variant: variant,
            isPlaceholder: !selectedItem,
            readOnly: readOnly,
            tooltipProps: tooltipProps,
            showArrow: showArrow,
            className: className, children:

            toggleRenderer ?
            toggleRenderer({ selectedItem: selectedItem, isOpen: isOpen, hasError: hasError }) : /*#__PURE__*/

            (0, _jsxRuntime.jsx)(ToggleContent, { size: size, variant: variant, children:
              selectedItem != null && itemToString(selectedItem) || placeholder }) })));




      } }));


};

var WindowedMenu = function WindowedMenu(_ref5)




{var items = _ref5.items,_ref5$itemHeight = _ref5.itemHeight,itemHeight = _ref5$itemHeight === void 0 ? 0 : _ref5$itemHeight,_ref5$itemToString = _ref5.itemToString,itemToString = _ref5$itemToString === void 0 ? _constants.defaultItemToString : _ref5$itemToString,listWidth = _ref5.listWidth;
  var actualHeight = itemHeight * items.length;
  var Row = function Row(_ref6) {var index = _ref6.index,style = _ref6.style;
    var item = items[index];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_dropdownMenuItem.DropdownMenuItemWithDropdownContext, { item: item, index: index, style: style }, itemToString(item));
  };
  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_reactWindow.FixedSizeList, {
      itemSize: itemHeight,
      width: listWidth,
      height: actualHeight > 320 ? 320 : actualHeight + _constants.MENU_SCROLLBAR_VERTICAL_PADDING * 2,
      itemCount: items.length,
      outerElementType: _ScrollBar.ScrollBar,
      innerElementType: WindowInnerComponent, children:

      Row }));


};

var DropdownHeader = function DropdownHeader() {
  var _useContext2 = (0, _react.useContext)(_dropdownContext.DropdownContext),dropdownProps = _useContext2.dropdownProps;
  var _ref7 = dropdownProps,_ref7$header = _ref7.header,header = _ref7$header === void 0 ? null : _ref7$header;

  if (!header) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownHeaderContainer, { children: header });
};

var DropdownFooter = function DropdownFooter() {
  var _useContext3 = (0, _react.useContext)(_dropdownContext.DropdownContext),dropdownProps = _useContext3.dropdownProps;
  var _ref8 = dropdownProps,_ref8$footer = _ref8.footer,footer = _ref8$footer === void 0 ? null : _ref8$footer;

  if (!footer) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownFooterContainer, { children: footer });
};

var MenuRenderer = function MenuRenderer(_ref9)








{var isMenuScrollable = _ref9.isMenuScrollable,items = _ref9.items,emptyView = _ref9.emptyView,itemsType = _ref9.itemsType,_ref9$itemToString = _ref9.itemToString,itemToString = _ref9$itemToString === void 0 ? _constants.defaultItemToString : _ref9$itemToString,scheduleUpdate = _ref9.scheduleUpdate,itemHeight = _ref9.itemHeight,listWidth = _ref9.listWidth;
  (0, _react.useEffect)(function () {
    scheduleUpdate();
  }, [items, scheduleUpdate]);

  var menuContent = function () {
    if (items.length === 0) {
      return emptyView || _constants.defaultEmptyView;
    }
    if (itemsType === 'section') {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownSections, { items: items });
    }
    return items.map(function (item, index) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_dropdownMenuItem.DropdownMenuItemWithDropdownContext, { item: item, index: index }, itemToString(item));
    });
  }();

  var scrollable =
  items.length > 0 && itemHeight && itemsType !== 'section' ? /*#__PURE__*/
  (0, _jsxRuntime.jsx)(WindowedMenu, { items: items, itemHeight: itemHeight, listWidth: listWidth, itemToString: itemToString }) : /*#__PURE__*/

  (0, _jsxRuntime.jsx)(_ScrollBar.ScrollBar, { style: { maxHeight: 320 }, children: menuContent });


  return isMenuScrollable ?
  scrollable : /*#__PURE__*/

  (0, _jsxRuntime.jsx)("div", { style: { padding: "".concat(_constants.MENU_SCROLLBAR_VERTICAL_PADDING, "px 0") }, children: menuContent });

};

var useIsOpen = function useIsOpen() {
  var _useContext4 = (0, _react.useContext)(_dropdownContext.DropdownContext),isOpen = _useContext4.isOpen;
  var previousIsOpen = (0, _react.useRef)(isOpen);

  (0, _react.useEffect)(function () {
    previousIsOpen.current = isOpen;
  }, [isOpen]);

  return { isOpen: isOpen, isOpenChanged: previousIsOpen.current !== isOpen };
};

var DropdownMenu = function DropdownMenu() {
  var _useState3 = (0, _react.useState)(false),_useState4 = _slicedToArray(_useState3, 2),isTransitioned = _useState4[0],setIsTransitioned = _useState4[1];
  var searchInputRef = (0, _react.useRef)(null);
  var _useContext5 =






  (0, _react.useContext)(_dropdownContext.DropdownContext),_useContext5$itemToSt = _useContext5.itemToString,itemToString = _useContext5$itemToSt === void 0 ? _constants.defaultItemToString : _useContext5$itemToSt,getMenuProps = _useContext5.getMenuProps,getInputProps = _useContext5.getInputProps,dropdownProps = _useContext5.dropdownProps,inputValue = _useContext5.inputValue,setInputValue = _useContext5.setInputValue;
  var _useIsOpen = useIsOpen(),isOpen = _useIsOpen.isOpen,isOpenChanged = _useIsOpen.isOpenChanged;

  var _ref10 =















  dropdownProps,portalId = _ref10.portalId,_ref10$placement = _ref10.placement,placement = _ref10$placement === void 0 ? 'bottom-start' : _ref10$placement,modifiers = _ref10.modifiers,width = _ref10.width,_ref10$items = _ref10.items,items = _ref10$items === void 0 ? [] : _ref10$items,_ref10$itemsType = _ref10.itemsType,itemsType = _ref10$itemsType === void 0 ? 'array' : _ref10$itemsType,_ref10$positionFixed = _ref10.positionFixed,positionFixed = _ref10$positionFixed === void 0 ? false : _ref10$positionFixed,emptyView = _ref10.emptyView,_ref10$useSearch = _ref10.useSearch,useSearch = _ref10$useSearch === void 0 ? false : _ref10$useSearch,searchPlaceholder = _ref10.searchPlaceholder,onSearchChange = _ref10.onSearchChange,onSearchKeyDown = _ref10.onSearchKeyDown,isMenuScrollable = _ref10.isMenuScrollable,itemHeight = _ref10.itemHeight,listWidth = _ref10.listWidth;

  var handleIconButtonClick = (0, _react.useCallback)(
  function (event) {
    event.preventDefault();
    setInputValue('');
  },
  [setInputValue]);


  (0, _react.useEffect)(function () {
    if (!isOpenChanged) {
      // Prevent setTimeout from being called on the first render
      return;
    }

    if (isOpen) {
      setTimeout(function () {var _searchInputRef$curre;
        setIsTransitioned(true);
        (_searchInputRef$curre = searchInputRef.current) === null || _searchInputRef$curre === void 0 ? void 0 : _searchInputRef$curre.focus();
      }, _constants.menuTransition.duration.milliseconds);
    } else {
      setTimeout(function () {
        setIsTransitioned(false);
        setInputValue('');
      }, _constants.menuTransition.duration.milliseconds);
    }
  }, [isOpen, isOpenChanged, setInputValue]);

  (0, _useOnChangeTrigger.useOnChangeTrigger)(inputValue !== null && inputValue !== void 0 ? inputValue : '', onSearchChange);

  var popper = (0, _react.useMemo)(function () {
    /**
     * { suppressRefError: true } is added here because I can confirm the component has been working without problems,
     * and the warnings generated by `refKey` check make debugging harder. However, [the Downshift
     * documentation](https://github.com/downshift-js/downshift#getmenuprops) does not recommend to use this option, and
     * it's best to make the implementation follow the original pattern.
     */
    var _getMenuProps = getMenuProps(undefined, { suppressRefError: true }),menuPropsRef = _getMenuProps.ref,menuProps = _objectWithoutProperties(_getMenuProps, ["ref"]);
    return /*#__PURE__*/(
      (0, _jsxRuntime.jsx)(_reactPopper.Popper, { placement: placement, positionFixed: positionFixed, modifiers: modifiers, innerRef: menuPropsRef, children:
        function children(_ref11) {var ref = _ref11.ref,scheduleUpdate = _ref11.scheduleUpdate,style = _ref11.style;
          return /*#__PURE__*/(
            (0, _jsxRuntime.jsxs)(_DropdownMenuItemList.DropdownMenuItemList, _objectSpread(_objectSpread({},
            menuProps), {}, {
              ref: ref,
              isOpen: isOpen,
              isOpenTransitionEnded: isTransitioned,
              width: width,
              style: style, children: [

              useSearch && /*#__PURE__*/
              (0, _jsxRuntime.jsxs)(SearchInput, { children: [/*#__PURE__*/
                (0, _jsxRuntime.jsx)("input", _objectSpread({
                  ref: searchInputRef,
                  type: "text",
                  placeholder: typeof searchPlaceholder === 'string' ? searchPlaceholder : 'Search' },
                getInputProps({
                  onChange: function onChange(event) {return setInputValue(event.target.value);},
                  onKeyDown: function onKeyDown(event) {
                    onSearchKeyDown === null || onSearchKeyDown === void 0 ? void 0 : onSearchKeyDown(event);
                  } }))), /*#__PURE__*/


                (0, _jsxRuntime.jsx)(SearchInputIconButton, {
                  buttonType: "secondary",
                  icon: inputValue ? 'close' : 'search',
                  size: "small",
                  onClick: handleIconButtonClick })] }), /*#__PURE__*/



              (0, _jsxRuntime.jsx)(DropdownHeader, {}), /*#__PURE__*/
              (0, _jsxRuntime.jsx)(MenuRenderer, {
                isMenuScrollable: isMenuScrollable,
                items: items,
                emptyView: emptyView,
                itemsType: itemsType,
                itemToString: itemToString,
                scheduleUpdate: scheduleUpdate,
                itemHeight: itemHeight,
                listWidth: listWidth }), /*#__PURE__*/

              (0, _jsxRuntime.jsx)(DropdownFooter, {})] })));


        } }));


  }, [
  emptyView,
  getInputProps,
  getMenuProps,
  handleIconButtonClick,
  inputValue,
  isMenuScrollable,
  isOpen,
  isTransitioned,
  itemHeight,
  itemToString,
  items,
  itemsType,
  listWidth,
  modifiers,
  onSearchKeyDown,
  placement,
  positionFixed,
  searchPlaceholder,
  setInputValue,
  useSearch,
  width]);


  if (!isOpen && !isTransitioned) {
    return null;
  }

  if (!portalId) {
    return popper;
  }

  var portalContainer = document.getElementById(portalId);
  return portalContainer && /*#__PURE__*/_reactDom.default.createPortal(popper, portalContainer);
};

var Dropdown = function Dropdown(dropdownProps) {
  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_reactPopper.Manager, { children: /*#__PURE__*/
      (0, _jsxRuntime.jsxs)(DropdownProvider, { dropdownProps: dropdownProps, children: [/*#__PURE__*/
        (0, _jsxRuntime.jsx)(DropdownToggle, {}), /*#__PURE__*/
        (0, _jsxRuntime.jsx)(DropdownMenu, {})] }) }));



};exports.Dropdown = Dropdown;

Dropdown.defaultProps = {
  isMenuScrollable: true };


Dropdown.stateChangeTypes = _downshift.default.stateChangeTypes;