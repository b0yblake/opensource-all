"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/es.weak-map.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.symbol.iterator.js");Object.defineProperty(exports, "__esModule", { value: true });exports.DropdownToggleButton = void 0;require("core-js/modules/es.object.keys.js");var _react = require("react");
var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));


var _tooltip = require("../tooltip");
var _constants = require("./constants");
var _DropdownToggleIcon = require("./DropdownToggleIcon");
var _styleGenerators = require("./styleGenerators");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}


















var getWidthCss = function getWidthCss(width) {
  if (width) {
    if (typeof width === 'number') {
      return (0, _styledComponents.css)(["width:", "px;"],
      width);

    }
    return (0, _styledComponents.css)(["width:", ";"],
    width);

  }
  return null;
};

var InlineTooltip = (0, _styledComponents.default)(_tooltip.Tooltip).withConfig({ displayName: "DropdownToggleButton__InlineTooltip", componentId: "y1u1lv-0" })(["display:inline-block;", ";"],

function (props) {return getWidthCss(props.$width);});


var ToggleArrow = (0, _styledComponents.default)(_DropdownToggleIcon.DropdownToggleIcon).withConfig({ displayName: "DropdownToggleButton__ToggleArrow", componentId: "y1u1lv-1" })(["margin-left:4px;", ";"],




_styleGenerators.generateToggleArrowStyle);


var ToggleButton = _styledComponents.default.button.withConfig({ displayName: "DropdownToggleButton__ToggleButton", componentId: "y1u1lv-2" })(["", ";", ";", ";", " &[aria-pressed= 'true' ]{", "{transform:rotate(180deg);}}", ""],





function (props) {return getWidthCss(props.$width);},

function (props) {return (0, _styleGenerators.generateToggleContainerSizeStyle)(props);},

function (_ref) {var variant = _ref.variant,toggleTheme = _ref.toggleTheme,_ref$isPlaceholder = _ref.isPlaceholder,isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder,_ref$readOnly = _ref.readOnly,readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly;
  var _getToggleColors =



















  (0, _styleGenerators.getToggleColors)(variant, toggleTheme),contentColor = _getToggleColors.contentColor,_getToggleColors$hove = _getToggleColors.hoverContentColor,hoverContentColor = _getToggleColors$hove === void 0 ? contentColor : _getToggleColors$hove,_getToggleColors$acti = _getToggleColors.activeContentColor,activeContentColor = _getToggleColors$acti === void 0 ? contentColor : _getToggleColors$acti,_getToggleColors$pres = _getToggleColors.pressedContentColor,pressedContentColor = _getToggleColors$pres === void 0 ? contentColor : _getToggleColors$pres,disabledContentColor = _getToggleColors.disabledContentColor,bgColor = _getToggleColors.bgColor,_getToggleColors$hove2 = _getToggleColors.hoverBgColor,hoverBgColor = _getToggleColors$hove2 === void 0 ? bgColor : _getToggleColors$hove2,activeBgColor = _getToggleColors.activeBgColor,_getToggleColors$pres2 = _getToggleColors.pressedBgColor,pressedBgColor = _getToggleColors$pres2 === void 0 ? activeBgColor : _getToggleColors$pres2,disabledBgColor = _getToggleColors.disabledBgColor,borderColor = _getToggleColors.borderColor,_getToggleColors$hove3 = _getToggleColors.hoverBorderColor,hoverBorderColor = _getToggleColors$hove3 === void 0 ? borderColor : _getToggleColors$hove3,_getToggleColors$acti2 = _getToggleColors.activeBorderColor,activeBorderColor = _getToggleColors$acti2 === void 0 ? borderColor : _getToggleColors$acti2,_getToggleColors$pres3 = _getToggleColors.pressedBorderColor,pressedBorderColor = _getToggleColors$pres3 === void 0 ? borderColor : _getToggleColors$pres3,disabledBorderColor = _getToggleColors.disabledBorderColor,readOnlyBgColor = _getToggleColors.readOnlyBgColor,readOnlyContentColor = _getToggleColors.readOnlyContentColor,readOnlyArrowColor = _getToggleColors.readOnlyArrowColor,focusOutlineColor = _getToggleColors.focusOutlineColor;
  return (0, _styledComponents.css)(["position:relative;-webkit-appearance:none;display:inline-flex;flex-direction:row;align-items:center;justify-content:space-between;", ";background-color:", ";border:1px solid ", ";border-radius:4px;cursor:pointer;user-select:none;outline:0;transition:", ";transition-property:color,background-color,border,box-shadow;", "{fill:", ";}&:not([data-is-loading='true']){&[aria-pressed='true']{color:", ";background-color:", ";border:1px solid ", ";", "{fill:", ";}}&:hover:not([aria-pressed='true']):not(:disabled){color:", ";background-color:", ";border:1px solid ", ";", "{fill:", ";}}&:active:not(:disabled){color:", ";background-color:", ";border:1px solid ", ";}&:focus:not(:disabled):not(:active){box-shadow:0 0 0 2px ", ";}}&:disabled{background-color:", ";border:1px solid ", ";color:", ";cursor:not-allowed;", "{fill:", ";}}", ""],







  isPlaceholder ? (0,
  _styledComponents.css)(["color:", ";"],
  (0, _cssVariables.default)('neutral-6')) : (0,

  _styledComponents.css)(["color:", ";"],
  contentColor),

  bgColor,
  borderColor,





  _constants.defaultTransition.css,


  _DropdownToggleIcon.DropdownToggleIcon,
  contentColor,




  pressedContentColor,
  pressedBgColor,
  pressedBorderColor,
  _DropdownToggleIcon.DropdownToggleIcon,
  pressedContentColor,




  hoverContentColor,
  hoverBgColor,
  hoverBorderColor,
  _DropdownToggleIcon.DropdownToggleIcon,
  hoverContentColor,




  activeContentColor,
  activeBgColor,
  activeBorderColor,



  focusOutlineColor,




  disabledBgColor,
  disabledBorderColor,
  disabledContentColor,

  _DropdownToggleIcon.DropdownToggleIcon,
  disabledContentColor,


  readOnly && (0,
  _styledComponents.css)(["&:read-only{background-color:", ";border:1px solid ", ";color:", ";cursor:text;", "{fill:", ";}}"],

  readOnlyBgColor,
  readOnlyBgColor,
  readOnlyContentColor,

  _DropdownToggleIcon.DropdownToggleIcon,
  readOnlyArrowColor));




},

function (props) {return (
    props.hasError && (0,
    _styledComponents.css)(["border-color:", ";"],
    (0, _cssVariables.default)('red-5')));},


ToggleArrow,




function (props) {return props.styles;});


var DropdownToggleButton = /*#__PURE__*/(0, _react.forwardRef)(
function (_ref2, ref) {var childrenProp = _ref2.children,_ref2$showArrow = _ref2.showArrow,showArrow = _ref2$showArrow === void 0 ? true : _ref2$showArrow,tooltipProps = _ref2.tooltipProps,width = _ref2.width,_ref2$type = _ref2.type,type = _ref2$type === void 0 ? 'button' : _ref2$type,props = _objectWithoutProperties(_ref2, ["children", "showArrow", "tooltipProps", "width", "type"]);
  var size = props.size,variant = props.variant;
  var children = /*#__PURE__*/
  (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, { children: [
    childrenProp,
    showArrow && /*#__PURE__*/(0, _jsxRuntime.jsx)(ToggleArrow, { icon: "input-arrow-down", size: 20, dropdownSize: size, variant: variant })] });



  var buttonProps = _objectSpread({ ref: ref, type: type }, props);

  if (tooltipProps) {
    return /*#__PURE__*/(
      (0, _jsxRuntime.jsx)(InlineTooltip, _objectSpread(_objectSpread({ popperProps: { modifiers: { offset: { offset: '0, 8' } } }, $width: width }, tooltipProps), {}, { children: /*#__PURE__*/
        (0, _jsxRuntime.jsx)(ToggleButton, _objectSpread(_objectSpread({ $width: "100%" }, buttonProps), {}, { children:
          children })) })));



  }
  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(ToggleButton, _objectSpread(_objectSpread({ $width: width }, buttonProps), {}, { children:
      children })));


});exports.DropdownToggleButton = DropdownToggleButton;