"use strict";require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.OverflowMenu = void 0;require("core-js/modules/es.array.map.js");require("core-js/modules/es.object.freeze.js");require("core-js/modules/es.object.keys.js");var _react = _interopRequireDefault(require("react"));
var _reactPopper = require("react-popper");
var _styledComponents = _interopRequireDefault(require("styled-components"));

var _downshift = _interopRequireDefault(require("downshift"));

var _elevation = require("../../../lib/elevation");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));

var _zIndexes = require("../../../lib/zIndexes");

var _button = require("../button");
var _tooltip = require("../tooltip");
var _MenuItem = require("./MenuItem");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}

var MenuList = _styledComponents.default.ul.withConfig({ displayName: "OverflowMenu__MenuList", componentId: "dxsxxf-0" })(["margin:0;padding:0;min-width:128px;padding:8px 0;border-radius:4px;background-color:white;", " z-index:", ";list-style:none;"],






_elevation.elevation.popover,
_zIndexes.ZIndexes.dropdownMenu);



var onDownshiftSelect = function onDownshiftSelect(selectedItem) {
  if (selectedItem !== null && selectedItem !== void 0 && selectedItem.onClick) {
    selectedItem.onClick();
  }
};



var OverflowMenu = function OverflowMenu(_ref)







{var items = _ref.items,_ref$iconButtonProps = _ref.iconButtonProps,iconButtonProps = _ref$iconButtonProps === void 0 ? { icon: 'more', size: 'small', buttonType: 'tertiary' } : _ref$iconButtonProps,popperProps = _ref.popperProps,onStateChange = _ref.onStateChange,className = _ref.className,_ref$stopClickEventPr = _ref.stopClickEventPropagation,stopClickEventPropagation = _ref$stopClickEventPr === void 0 ? false : _ref$stopClickEventPr,ariaLabel = _ref['aria-label'];
  var _iconButtonProps$icon =





  iconButtonProps.icon,icon = _iconButtonProps$icon === void 0 ? 'more' : _iconButtonProps$icon,_iconButtonProps$size = iconButtonProps.size,size = _iconButtonProps$size === void 0 ? 'small' : _iconButtonProps$size,_iconButtonProps$butt = iconButtonProps.buttonType,buttonType = _iconButtonProps$butt === void 0 ? 'tertiary' : _iconButtonProps$butt,iconButtonPropsOnClick = iconButtonProps.onClick,restIconButtonProps = _objectWithoutProperties(iconButtonProps, ["icon", "size", "buttonType", "onClick"]);
  var handleMenuListClick = function handleMenuListClick(e) {
    stopClickEventPropagation && e.stopPropagation();
  };

  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_downshift.default, {
      itemToString: function itemToString(item) {return item ? item.label : '';},
      onSelect: onDownshiftSelect,
      onStateChange: onStateChange, children:

      function children(_ref2) {var getItemProps = _ref2.getItemProps,getMenuProps = _ref2.getMenuProps,isOpen = _ref2.isOpen,highlightedIndex = _ref2.highlightedIndex,getToggleButtonProps = _ref2.getToggleButtonProps;
        /**
         * { suppressRefError: true } is added here because I can confirm the component has been working without
         * problems, and the warnings generated by `refKey` check make debugging harder. However, [the Downshift
         * documentation](https://github.com/downshift-js/downshift#getmenuprops) does not recommend to use this option,
         * and it's best to make the implementation follow the original pattern.
         */
        var _getMenuProps = getMenuProps(undefined, { suppressRefError: true }),menuPropsRef = _getMenuProps.ref,menuProps = _objectWithoutProperties(_getMenuProps, ["ref"]);

        return /*#__PURE__*/(
          (0, _jsxRuntime.jsx)("div", { className: className, children: /*#__PURE__*/
            (0, _jsxRuntime.jsxs)(_reactPopper.Manager, { children: [/*#__PURE__*/
              (0, _jsxRuntime.jsx)(_reactPopper.Reference, { children:
                function children(_ref3) {var ref = _ref3.ref;
                  var _getToggleButtonProps = getToggleButtonProps(
                  ariaLabel ? { 'aria-label': ariaLabel } : undefined),originalOnClick = _getToggleButtonProps.onClick,toggleButtonProps = _objectWithoutProperties(_getToggleButtonProps, ["onClick"]);

                  var onClick = function onClick(event) {
                    if (stopClickEventPropagation) {
                      event.stopPropagation();
                    }
                    originalOnClick(event);
                    iconButtonPropsOnClick === null || iconButtonPropsOnClick === void 0 ? void 0 : iconButtonPropsOnClick(event);
                  };

                  return /*#__PURE__*/(
                    (0, _jsxRuntime.jsx)(_button.IconButton, _objectSpread(_objectSpread({
                      ref: ref,
                      size: size,
                      buttonType: buttonType,
                      icon: icon,
                      "aria-pressed": isOpen },
                    restIconButtonProps), {}, {
                      onClick: onClick },
                    toggleButtonProps)));


                } }),

              isOpen && /*#__PURE__*/
              (0, _jsxRuntime.jsx)(_reactPopper.Popper, _objectSpread(_objectSpread({ placement: "bottom-end", innerRef: menuPropsRef }, popperProps), {}, { children:
                function children(_ref4) {var ref = _ref4.ref,style = _ref4.style;
                  return /*#__PURE__*/(
                    (0, _jsxRuntime.jsx)(MenuList, _objectSpread(_objectSpread({}, menuProps), {}, { ref: ref, style: style, onClick: handleMenuListClick, children:
                      items.map(function (item, index) {
                        if ('isDivider' in item) {
                          return null;
                        }

                        var key = item.label;
                        var isPreviousItemDivider = index > 0 && 'isDivider' in items[index - 1];
                        var _getItemProps = getItemProps({
                          key: key,
                          index: index,
                          item: item,
                          style: {
                            backgroundColor: highlightedIndex === index ? (0, _cssVariables.default)('neutral-2') : 'white' } }),originalOnClick = _getItemProps.onClick,itemProps = _objectWithoutProperties(_getItemProps, ["onClick"]);


                        var onClick = stopClickEventPropagation ?
                        function (event) {
                          event.stopPropagation();
                          originalOnClick(event);
                        } :
                        originalOnClick;

                        var menuItem = /*#__PURE__*/
                        (0, _jsxRuntime.jsx)(_MenuItem.MenuItem, {

                          item: item,
                          itemProps: itemProps,
                          onClick: onClick,
                          isPreviousItemDivider: isPreviousItemDivider }, key);



                        if (item.tooltip) {
                          return /*#__PURE__*/(
                            (0, _jsxRuntime.jsx)(_tooltip.Tooltip, _objectSpread(_objectSpread({}, item.tooltip), {}, { children:
                              menuItem }), key));


                        }
                        return menuItem;
                      }) })));


                } }))] }) }));





      } }));


};exports.OverflowMenu = OverflowMenu;

OverflowMenu.divider = Object.freeze({ isDivider: true });