"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.from.js");require("core-js/modules/es.weak-map.js");Object.defineProperty(exports, "__esModule", { value: true });exports.TreeSelect = void 0;require("core-js/modules/es.array.find.js");var _react = _interopRequireWildcard(require("react"));
var _reactPopper = require("react-popper");
var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _downshift = _interopRequireDefault(require("downshift"));

var _animation = require("../../../lib/animation");
var _button = require("../../../lib/components/button");
var _dropdown = require("../../../lib/components/dropdown");
var _styleGenerators = require("../../../lib/components/dropdown/styleGenerators");
var _ScrollBar = require("../../../lib/components/ScrollBar");
var _tree = require("../../../lib/components/tree");
var _utils = require("../../../lib/components/tree/utils");
var _elevation = require("../../../lib/elevation");

var _zIndexes = require("../../../lib/zIndexes");

var _selectedNodes = require("./selectedNodes");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
























var passRef = function passRef(node, ref) {
  if (typeof ref === 'function') {
    ref(node);
  } else if (ref) {
    ref.current = node;
  }
};

var stateReducer = function stateReducer(_, changes) {
  switch (changes.type) {
    case _downshift.default.stateChangeTypes.clickItem:{
        var defaultIsOpenValue = true;

        return _objectSpread(_objectSpread({},
        changes), {}, {
          isOpen: defaultIsOpenValue });

      }
    default:
      return changes;}

};

var itemToString = function itemToString(item) {return (item === null || item === void 0 ? void 0 : item.label) || '';};

var ToggleButton = _styledComponents.default.button.withConfig({ displayName: "treeSelect__ToggleButton", componentId: "h9v6zt-0" })(["width:", ";", " ", ""],
function (_ref) {var width = _ref.width;
  if (width) {
    if (typeof width === 'number') {
      return "".concat(width, "px");
    }
    return width;
  }
  return null;
},

function (_ref2) {var variant = _ref2.variant,toggleTheme = _ref2.toggleTheme;
  var _getToggleColors =
















  (0, _styleGenerators.getToggleColors)(variant, toggleTheme),contentColor = _getToggleColors.contentColor,_getToggleColors$hove = _getToggleColors.hoverContentColor,hoverContentColor = _getToggleColors$hove === void 0 ? contentColor : _getToggleColors$hove,_getToggleColors$acti = _getToggleColors.activeContentColor,activeContentColor = _getToggleColors$acti === void 0 ? contentColor : _getToggleColors$acti,_getToggleColors$pres = _getToggleColors.pressedContentColor,pressedContentColor = _getToggleColors$pres === void 0 ? contentColor : _getToggleColors$pres,disabledContentColor = _getToggleColors.disabledContentColor,bgColor = _getToggleColors.bgColor,_getToggleColors$hove2 = _getToggleColors.hoverBgColor,hoverBgColor = _getToggleColors$hove2 === void 0 ? bgColor : _getToggleColors$hove2,activeBgColor = _getToggleColors.activeBgColor,_getToggleColors$pres2 = _getToggleColors.pressedBgColor,pressedBgColor = _getToggleColors$pres2 === void 0 ? activeBgColor : _getToggleColors$pres2,disabledBgColor = _getToggleColors.disabledBgColor,borderColor = _getToggleColors.borderColor,_getToggleColors$hove3 = _getToggleColors.hoverBorderColor,hoverBorderColor = _getToggleColors$hove3 === void 0 ? borderColor : _getToggleColors$hove3,_getToggleColors$acti2 = _getToggleColors.activeBorderColor,activeBorderColor = _getToggleColors$acti2 === void 0 ? borderColor : _getToggleColors$acti2,_getToggleColors$pres3 = _getToggleColors.pressedBorderColor,pressedBorderColor = _getToggleColors$pres3 === void 0 ? borderColor : _getToggleColors$pres3,disabledBorderColor = _getToggleColors.disabledBorderColor,focusOutlineColor = _getToggleColors.focusOutlineColor;

  return (0, _styledComponents.css)(["position:relative;-webkit-appearance:none;display:inline-flex;flex-direction:row;justify-content:flex-start;background-color:", ";border:1px solid ", ";border-radius:4px;cursor:pointer;user-select:none;outline:0;transition:", ";", "{fill:", ";}&:not([data-is-loading='true']){&[aria-pressed='true']{color:", ";background-color:", ";border:1px solid ", ";", "{fill:", ";}}&:hover:not([aria-pressed='true']):not(:disabled){color:", ";background-color:", ";border:1px solid ", ";", "{fill:", ";}}&:active:not(:disabled){color:", ";background-color:", ";border:1px solid ", ";}&:focus:not(:disabled):not(:active){box-shadow:0 0 0 2px ", ";}}&:disabled{background-color:", ";border:1px solid ", ";color:", ";cursor:not-allowed;", "{fill:", ";}}"],





  bgColor,
  borderColor,




  (0, _animation.transitions)({
    duration: 0.2,
    properties: ['color', 'background-color', 'border', 'box-shadow'] }),


  _dropdown.DropdownToggleIcon,
  contentColor,




  pressedContentColor,
  pressedBgColor,
  pressedBorderColor,
  _dropdown.DropdownToggleIcon,
  pressedContentColor,




  hoverContentColor,
  hoverBgColor,
  hoverBorderColor,
  _dropdown.DropdownToggleIcon,
  hoverContentColor,




  activeContentColor,
  activeBgColor,
  activeBorderColor,



  focusOutlineColor,




  disabledBgColor,
  disabledBorderColor,
  disabledContentColor,

  _dropdown.DropdownToggleIcon,
  disabledContentColor);



},

function (_ref3) {var styles = _ref3.styles;return styles;});


var ToggleContainer = _styledComponents.default.div.withConfig({ displayName: "treeSelect__ToggleContainer", componentId: "h9v6zt-1" })(["display:flex;flex-direction:row;align-items:flex-start;width:100%;min-height:30px;padding:0 8px;"]);








var ToggleContentWrapper = _styledComponents.default.div.withConfig({ displayName: "treeSelect__ToggleContentWrapper", componentId: "h9v6zt-2" })(["flex:1;"]);



var ToggleScrollBar = (0, _styledComponents.default)(_ScrollBar.ScrollBar).withConfig({ displayName: "treeSelect__ToggleScrollBar", componentId: "h9v6zt-3" })(["width:100%;max-height:80px;"]);




var ToggleArrow = (0, _styledComponents.default)(_dropdown.DropdownToggleIcon).withConfig({ displayName: "treeSelect__ToggleArrow", componentId: "h9v6zt-4" })(["padding-top:2px;transition:0.2s ", ";transition-property:fill,transform;"],

_animation.transitionDefault);



var ToggleActionsWrapper = _styledComponents.default.div.withConfig({ displayName: "treeSelect__ToggleActionsWrapper", componentId: "h9v6zt-5" })(["display:flex;flex-direction:row;align-items:center;margin-top:3px;"]);






var TreeMenu = _styledComponents.default.div.withConfig({ displayName: "treeSelect__TreeMenu", componentId: "h9v6zt-6" })(["position:relative;z-index:", ";max-height:320px;overflow:hidden;background:white;border-radius:4px;display:", ";", ""],

_zIndexes.ZIndexes.dropdownMenu,




function (_ref4) {var isOpen = _ref4.isOpen;return !isOpen && 'none';},

_elevation.elevation.popover);


var TreeMenuScrollBar = (0, _styledComponents.default)(_ScrollBar.ScrollBar).withConfig({ displayName: "treeSelect__TreeMenuScrollBar", componentId: "h9v6zt-7" })(["max-height:272px;padding:8px 0;"]);




var TreeSelect = function TreeSelect(_ref5)
















{var treeData = _ref5.treeData,selectedNodes = _ref5.selectedNodes,treeExpandedKeys = _ref5.treeExpandedKeys,_ref5$disabled = _ref5.disabled,disabled = _ref5$disabled === void 0 ? false : _ref5$disabled,_ref5$treeDefaultExpa = _ref5.treeDefaultExpandAll,treeDefaultExpandAll = _ref5$treeDefaultExpa === void 0 ? false : _ref5$treeDefaultExpa,toggleRenderer = _ref5.toggleRenderer,prefixItem = _ref5.prefixItem,width = _ref5.width,toggleButtonStyles = _ref5.toggleButtonStyles,onSelect = _ref5.onSelect,onTreeExpand = _ref5.onTreeExpand,nodeToElement = _ref5.nodeToElement,className = _ref5.className,selectedNodeMaxWidth = _ref5.selectedNodeMaxWidth,buttonRefProp = _ref5.buttonRef,menuRef = _ref5.menuRef;
  var constructedTreeNodes = (0, _react.useRef)((0, _utils.constructTreeNodes)(treeData));
  var treeHandlerRef = (0, _react.useRef)(null);
  var toggleContentScrollBarRef = (0, _react.useRef)(null);
  var treeMenuScrollBarRef = (0, _react.useRef)(null);
  var popperScheduleUpdateRef = (0, _react.useRef)(null);

  var buttonRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(0),_useState2 = _slicedToArray(_useState, 2),buttonWidth = _useState2[0],setButtonWidth = _useState2[1];

  (0, _react.useLayoutEffect)(function () {var _buttonRef$current;
    // when selectedNodes change, update the button width to adjust the width of menu items (Tree component)
    if (buttonWidth !== ((_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.clientWidth)) {var _buttonRef$current$cl, _buttonRef$current2;
      setButtonWidth((_buttonRef$current$cl = (_buttonRef$current2 = buttonRef.current) === null || _buttonRef$current2 === void 0 ? void 0 : _buttonRef$current2.clientWidth) !== null && _buttonRef$current$cl !== void 0 ? _buttonRef$current$cl : 0);
    }
  }, [selectedNodes, buttonWidth]);

  var handleSelectedNodeRemove = function handleSelectedNodeRemove(selectedNode) {
    var targetNode = constructedTreeNodes.current.find(function (node) {return node.value === selectedNode.value;});

    if (targetNode) {var _treeHandlerRef$curre;
      treeHandlerRef === null || treeHandlerRef === void 0 ? void 0 : (_treeHandlerRef$curre = treeHandlerRef.current) === null || _treeHandlerRef$curre === void 0 ? void 0 : _treeHandlerRef$curre.handleSelect(targetNode);
    }
  };

  var handleClearButtonClick = function handleClearButtonClick(event) {
    event.stopPropagation();
    onSelect([]);
  };

  var handleTreeExpand = function handleTreeExpand(treeExpandKeys) {var _treeMenuScrollBarRef;
    (_treeMenuScrollBarRef = treeMenuScrollBarRef.current) === null || _treeMenuScrollBarRef === void 0 ? void 0 : _treeMenuScrollBarRef.update();
    onTreeExpand === null || onTreeExpand === void 0 ? void 0 : onTreeExpand(treeExpandKeys);
  };

  (0, _react.useEffect)(function () {var _popperScheduleUpdate, _toggleContentScrollB;
    popperScheduleUpdateRef === null || popperScheduleUpdateRef === void 0 ? void 0 : (_popperScheduleUpdate = popperScheduleUpdateRef.current) === null || _popperScheduleUpdate === void 0 ? void 0 : _popperScheduleUpdate.call(popperScheduleUpdateRef);
    toggleContentScrollBarRef === null || toggleContentScrollBarRef === void 0 ? void 0 : (_toggleContentScrollB = toggleContentScrollBarRef.current) === null || _toggleContentScrollB === void 0 ? void 0 : _toggleContentScrollB.update();
  }, [selectedNodes]);

  (0, _react.useEffect)(function () {
    constructedTreeNodes.current = (0, _utils.constructTreeNodes)(treeData);
  }, [treeData]);

  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(_reactPopper.Manager, { children: /*#__PURE__*/
      (0, _jsxRuntime.jsx)(_downshift.default, { itemToString: itemToString, stateReducer: stateReducer, children:
        function children(_ref6) {var isOpen = _ref6.isOpen,getItemProps = _ref6.getItemProps,getMenuProps = _ref6.getMenuProps,getToggleButtonProps = _ref6.getToggleButtonProps;return /*#__PURE__*/(
            (0, _jsxRuntime.jsxs)("div", { className: className, children: [/*#__PURE__*/
              (0, _jsxRuntime.jsx)(_reactPopper.Reference, {
                innerRef: function innerRef(node) {
                  passRef(node, buttonRefProp);
                  buttonRef.current = node;
                }, children:

                function children(_ref7) {var _toggleRenderer;var ref = _ref7.ref;return /*#__PURE__*/(
                    (0, _jsxRuntime.jsx)(ToggleButton, _objectSpread(_objectSpread({
                      ref: ref,
                      size: "small",
                      variant: "default",
                      width: width,
                      "aria-pressed": !!toggleRenderer && isOpen,
                      styles: toggleButtonStyles },
                    getToggleButtonProps({ disabled: disabled })), {}, { children: /*#__PURE__*/

                      (0, _jsxRuntime.jsxs)(ToggleContainer, { children: [/*#__PURE__*/
                        (0, _jsxRuntime.jsx)(ToggleContentWrapper, { children: (_toggleRenderer =
                          toggleRenderer === null || toggleRenderer === void 0 ? void 0 : toggleRenderer({ isOpen: isOpen })) !== null && _toggleRenderer !== void 0 ? _toggleRenderer : /*#__PURE__*/
                          (0, _jsxRuntime.jsx)(ToggleScrollBar, { ref: toggleContentScrollBarRef, children: /*#__PURE__*/
                            (0, _jsxRuntime.jsx)(_selectedNodes.SelectedNodes, {
                              selectedNodes: selectedNodes,
                              onRemove: handleSelectedNodeRemove,
                              tagMaxWidth: selectedNodeMaxWidth }) }) }), /*#__PURE__*/




                        (0, _jsxRuntime.jsxs)(ToggleActionsWrapper, { children: [
                          !(0, _utils.checkIsAllNodesSelected)(constructedTreeNodes.current, selectedNodes) &&
                          selectedNodes.length > 0 && /*#__PURE__*/
                          (0, _jsxRuntime.jsx)(_button.IconButton, {
                            icon: "close",
                            size: "xsmall",
                            buttonType: "tertiary",
                            iconSize: 16,
                            onClick: handleClearButtonClick }), /*#__PURE__*/


                          (0, _jsxRuntime.jsx)(ToggleArrow, { icon: isOpen ? 'input-arrow-up' : 'input-arrow-down', size: 20 })] })] }) })));} }), /*#__PURE__*/





              (0, _jsxRuntime.jsx)(_reactPopper.Popper, {
                placement: "bottom-start",
                innerRef: function innerRef(node) {
                  passRef(node, menuRef);
                }, children:

                function children(_ref8) {var ref = _ref8.ref,style = _ref8.style,scheduleUpdate = _ref8.scheduleUpdate;
                  popperScheduleUpdateRef.current = scheduleUpdate;
                  return /*#__PURE__*/(
                    (0, _jsxRuntime.jsxs)(TreeMenu, { ref: ref, style: style, isOpen: isOpen, children: [
                      prefixItem, /*#__PURE__*/
                      (0, _jsxRuntime.jsx)(TreeMenuScrollBar, { children: /*#__PURE__*/
                        (0, _jsxRuntime.jsx)(_tree.Tree, {
                          ref: treeHandlerRef,
                          treeData: treeData,
                          selectedNodes: selectedNodes,
                          treeExpandedKeys: treeExpandedKeys,
                          treeDefaultExpandAll: treeDefaultExpandAll,
                          constructedTreeNodes: constructedTreeNodes.current,
                          minWidth: buttonWidth,
                          onSelect: onSelect,
                          onTreeExpand: handleTreeExpand,
                          nodeToElement: nodeToElement,
                          getItemProps: getItemProps,
                          getMenuProps: getMenuProps }) })] }));




                } })] }));} }) }));






};exports.TreeSelect = TreeSelect;