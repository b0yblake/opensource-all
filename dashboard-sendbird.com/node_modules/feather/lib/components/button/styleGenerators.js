"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.generateButtonContainerStyle = exports.getContainerGeneratorOptions = exports.generateButtonSizeStyle = exports.buttonSizeStyleMap = void 0;var _styledComponents = require("styled-components");

var _polished = require("polished");


var _animation = require("../../../lib/animation");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));
var _themes = require("../../../lib/themes");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


var buttonSizeStyleMap = {
  small: { minWidth: 80, horizontalPadding: 16, height: 32, fontSize: 14, lineHeight: 20 },
  medium: { minWidth: 80, horizontalPadding: 16, height: 40, fontSize: 14, lineHeight: 20 },
  large: { minWidth: 132, horizontalPadding: 16, height: 48, fontSize: 18, lineHeight: 24 } };exports.buttonSizeStyleMap = buttonSizeStyleMap;


var generateButtonSizeStyle = function generateButtonSizeStyle(_ref) {var size = _ref.size,_ref$isGhostButton = _ref.isGhostButton,isGhostButton = _ref$isGhostButton === void 0 ? false : _ref$isGhostButton;
  var _buttonSizeStyleMap$s =





  buttonSizeStyleMap[size],defaultMinWidth = _buttonSizeStyleMap$s.minWidth,horizontalPaddingDefault = _buttonSizeStyleMap$s.horizontalPadding,height = _buttonSizeStyleMap$s.height,fontSize = _buttonSizeStyleMap$s.fontSize,lineHeight = _buttonSizeStyleMap$s.lineHeight;
  var minWidth = isGhostButton ? defaultMinWidth + 8 : defaultMinWidth;
  var horizontalPadding = isGhostButton ? horizontalPaddingDefault - 4 : horizontalPaddingDefault;

  return (0, _styledComponents.css)(["min-width:", "px;padding-left:", "px;padding-right:", "px;padding-top:0;padding-bottom:0;height:", "px;font-size:", "px;line-height:", "px;"],
  minWidth,
  horizontalPadding,
  horizontalPadding,


  height,
  fontSize,
  lineHeight);

};exports.generateButtonSizeStyle = generateButtonSizeStyle;

var getContainerGeneratorOptions = function getContainerGeneratorOptions(_ref2)



{var _ref2$theme = _ref2.theme,theme = _ref2$theme === void 0 ? _themes.FeatherThemeEnum.Default : _ref2$theme,buttonType = _ref2.buttonType,variant = _ref2.variant;
  switch (variant) {
    case 'ghost':
      switch (buttonType) {
        case 'primary':
          return {
            contentColor: (0, _cssVariables.default)('purple-7'),
            hoverContentColor: (0, _cssVariables.default)('purple-7'),
            activeContentColor: (0, _cssVariables.default)('purple-7'),
            disabledContentColor: (0, _cssVariables.default)('content-disabled'),
            bgColor: 'transparent',
            hoverBgColor: (0, _cssVariables.default)('bg-overlay-1'),
            activeBgColor: (0, _cssVariables.default)('neutral-3'),
            disabledBgColor: 'transparent',
            borderColor: 'transparent',
            disabledBorderColor: 'transparent' };

        case 'secondary':
          return {
            contentColor: (0, _cssVariables.default)('content-1'),
            hoverContentColor: (0, _cssVariables.default)('content-1'),
            activeContentColor: (0, _cssVariables.default)('content-1'),
            disabledContentColor: (0, _cssVariables.default)('content-disabled'),
            bgColor: 'transparent',
            hoverBgColor: (0, _cssVariables.default)('neutral-1'),
            activeBgColor: (0, _cssVariables.default)('neutral-3'),
            disabledBgColor: 'transparent',
            borderColor: 'transparent',
            disabledBorderColor: 'transparent' };

        default:
          return {
            contentColor: (0, _cssVariables.default)('neutral-7'),
            hoverContentColor: (0, _cssVariables.default)('neutral-7'),
            activeContentColor: (0, _cssVariables.default)('neutral-7'),
            disabledContentColor: (0, _cssVariables.default)('neutral-5'),
            bgColor: 'transparent',
            hoverBgColor: (0, _cssVariables.default)('neutral-1'),
            activeBgColor: (0, _cssVariables.default)('neutral-3'),
            disabledBgColor: 'transparent',
            borderColor: 'transparent',
            disabledBorderColor: 'transparent' };}


    default:
      switch (buttonType) {
        case 'primary':
          switch (theme) {
            case _themes.FeatherThemeEnum.Neutral:
              return {
                contentColor: (0, _cssVariables.default)('neutral-10'),
                hoverContentColor: (0, _cssVariables.default)('neutral-10'),
                activeContentColor: (0, _cssVariables.default)('neutral-10'),
                disabledContentColor: (0, _cssVariables.default)('neutral-6'),
                disabledBgColor: (0, _cssVariables.default)('neutral-8'),
                borderColor: 'transparent',
                bgColor: 'white',
                hoverBgColor: (0, _cssVariables.default)('neutral-2'),
                disabledBorderColor: 'transparent',
                activeBgColor: (0, _cssVariables.default)('neutral-3') };

            default:
              return {
                contentColor: 'white',
                hoverContentColor: 'white',
                activeContentColor: 'white',
                disabledContentColor: (0, _cssVariables.default)('neutral-5'),
                disabledBgColor: (0, _cssVariables.default)('neutral-2'),
                borderColor: 'transparent',
                bgColor: (0, _cssVariables.default)('purple-7'),
                hoverBgColor: (0, _cssVariables.default)('purple-8'),
                disabledBorderColor: 'transparent',
                activeBgColor: (0, _cssVariables.default)('purple-9') };}


        case 'support':
          return {
            contentColor: 'white',
            hoverContentColor: 'white',
            activeContentColor: 'white',
            disabledContentColor: (0, _cssVariables.default)('neutral-5'),
            disabledBgColor: (0, _cssVariables.default)('neutral-2'),
            borderColor: 'transparent',
            bgColor: (0, _cssVariables.default)('green-5'),
            hoverBgColor: (0, _cssVariables.default)('green-6'),
            disabledBorderColor: 'transparent',
            activeBgColor: (0, _cssVariables.default)('green-7') };

        case 'secondary':
          switch (theme) {
            case _themes.FeatherThemeEnum.Neutral:
              return {
                contentColor: 'white',
                hoverContentColor: (0, _cssVariables.default)('neutral-3'),
                activeContentColor: (0, _cssVariables.default)('neutral-3'),
                disabledContentColor: (0, _cssVariables.default)('neutral-6'),
                bgColor: 'transparent',
                hoverBgColor: 'transparent',
                activeBgColor: (0, _cssVariables.default)('neutral-8'),
                disabledBgColor: 'transparent',
                borderColor: 'white',
                hoverBorderColor: (0, _cssVariables.default)('neutral-5'),
                activeBorderColor: (0, _cssVariables.default)('neutral-5'),
                disabledBorderColor: (0, _cssVariables.default)('neutral-7') };

            default:
              return {
                contentColor: (0, _cssVariables.default)('purple-7'),
                hoverContentColor: 'white',
                activeContentColor: 'white',
                disabledContentColor: (0, _cssVariables.default)('neutral-5'),
                bgColor: 'transparent',
                hoverBgColor: (0, _cssVariables.default)('purple-7'),
                activeBgColor: (0, _cssVariables.default)('purple-9'),
                disabledBgColor: 'transparent',
                borderColor: (0, _cssVariables.default)('purple-7'),
                hoverBorderColor: (0, _cssVariables.default)('purple-7'),
                activeBorderColor: (0, _cssVariables.default)('purple-9'),
                disabledBorderColor: (0, _cssVariables.default)('neutral-2') };}


        case 'danger':
          return {
            contentColor: 'white',
            hoverContentColor: 'white',
            activeContentColor: 'white',
            disabledContentColor: (0, _cssVariables.default)('neutral-5'),
            disabledBgColor: (0, _cssVariables.default)('neutral-2'),
            borderColor: 'transparent',
            bgColor: (0, _cssVariables.default)('red-5'),
            hoverBgColor: (0, _cssVariables.default)('red-6'),
            disabledBorderColor: 'transparent',
            activeBgColor: (0, _cssVariables.default)('red-7') };

        default:
          return {
            contentColor: (0, _cssVariables.default)('neutral-7'),
            hoverContentColor: (0, _cssVariables.default)('purple-7'),
            activeContentColor: (0, _cssVariables.default)('purple-7'),
            disabledContentColor: (0, _cssVariables.default)('neutral-5'),
            bgColor: 'transparent',
            activeBgColor: (0, _cssVariables.default)('purple-2'),
            disabledBgColor: 'transparent',
            borderColor: (0, _cssVariables.default)('neutral-4'),
            hoverBorderColor: (0, _cssVariables.default)('purple-7'),
            activeBorderColor: (0, _cssVariables.default)('purple-7'),
            disabledBorderColor: (0, _cssVariables.default)('neutral-2') };}}



};exports.getContainerGeneratorOptions = getContainerGeneratorOptions;

var generateButtonContainerStyle = function generateButtonContainerStyle(_ref3)
















{var contentColor = _ref3.contentColor,_ref3$hoverContentCol = _ref3.hoverContentColor,hoverContentColor = _ref3$hoverContentCol === void 0 ? contentColor : _ref3$hoverContentCol,_ref3$activeContentCo = _ref3.activeContentColor,activeContentColor = _ref3$activeContentCo === void 0 ? contentColor : _ref3$activeContentCo,_ref3$pressedContentC = _ref3.pressedContentColor,pressedContentColor = _ref3$pressedContentC === void 0 ? contentColor : _ref3$pressedContentC,disabledContentColor = _ref3.disabledContentColor,bgColor = _ref3.bgColor,_ref3$hoverBgColor = _ref3.hoverBgColor,hoverBgColor = _ref3$hoverBgColor === void 0 ? bgColor : _ref3$hoverBgColor,activeBgColor = _ref3.activeBgColor,_ref3$pressedBgColor = _ref3.pressedBgColor,pressedBgColor = _ref3$pressedBgColor === void 0 ? activeBgColor : _ref3$pressedBgColor,disabledBgColor = _ref3.disabledBgColor,borderColor = _ref3.borderColor,_ref3$hoverBorderColo = _ref3.hoverBorderColor,hoverBorderColor = _ref3$hoverBorderColo === void 0 ? borderColor : _ref3$hoverBorderColo,_ref3$activeBorderCol = _ref3.activeBorderColor,activeBorderColor = _ref3$activeBorderCol === void 0 ? borderColor : _ref3$activeBorderCol,_ref3$pressedBorderCo = _ref3.pressedBorderColor,pressedBorderColor = _ref3$pressedBorderCo === void 0 ? borderColor : _ref3$pressedBorderCo,disabledBorderColor = _ref3.disabledBorderColor,_ref3$focusOutlineCol = _ref3.focusOutlineColor,focusOutlineColor = _ref3$focusOutlineCol === void 0 ? (0, _cssVariables.default)('purple-7') : _ref3$focusOutlineCol;
  var isFocusOutlineUnseparated =
  bgColor === focusOutlineColor && (
  borderColor === focusOutlineColor ||
  borderColor === 'transparent' ||
  (0, _polished.parseToRgb)(borderColor).alpha === 0);

  return (0, _styledComponents.css)(["position:relative;display:inline-flex;flex-direction:row;align-items:center;justify-content:center;color:", ";background-color:", ";border:1px solid ", ";border-radius:4px;font-weight:600;white-space:nowrap;overflow:hidden;cursor:pointer;user-select:none;outline:0;transition:", ";&:not([data-is-loading='true']){&[aria-pressed='true']{color:", ";background-color:", ";border:1px solid ", ";}&:hover{color:", ";background-color:", ";border:1px solid ", ";}&:active{color:", ";background-color:", ";border:1px solid ", ";}&:focus:not(:active){", " box-shadow:0 0 0 2px ", ";}&:disabled{color:", ";background-color:", ";border:1px solid ", ";}}&:disabled{color:", ";cursor:default;pointer-events:none;}"],






  contentColor,
  bgColor,
  borderColor,









  (0, _animation.transitions)({ duration: 0.2, properties: ['color', 'background-color', 'border', 'box-shadow'] }),



  pressedContentColor,
  pressedBgColor,
  pressedBorderColor,



  hoverContentColor,
  hoverBgColor,
  hoverBorderColor,



  activeContentColor,
  activeBgColor,
  activeBorderColor,



  isFocusOutlineUnseparated && 'border: 1px solid #fff;',
  focusOutlineColor,



  disabledContentColor,
  disabledBgColor,
  disabledBorderColor,




  disabledContentColor);







};exports.generateButtonContainerStyle = generateButtonContainerStyle;