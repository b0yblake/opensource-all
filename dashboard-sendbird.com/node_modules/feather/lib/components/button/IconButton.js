"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/es.weak-map.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.symbol.iterator.js");Object.defineProperty(exports, "__esModule", { value: true });exports.IconButton = void 0;var _react = require("react");
var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _animation = require("../../../lib/animation");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));
var _themes = require("../../../lib/themes");


var _icon = require("../icon");
var _spinner = require("../spinner");
var _tooltip = require("../tooltip");
var hideOutlineEventListeners = _interopRequireWildcard(require("./hideOutlineEventListeners"));
var _styleGenerators = require("./styleGenerators");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var getSpinnerColor = function getSpinnerColor(theme, buttonType) {
  if (theme === _themes.FeatherThemeEnum.Gray) {
    return buttonType === 'tertiary' ? (0, _cssVariables.default)('neutral-6') : (0, _cssVariables.default)('neutral-9');
  }
  if (theme === _themes.FeatherThemeEnum.Neutral || theme === _themes.FeatherThemeEnum.Purple) {
    return 'white';
  }
  return (0, _cssVariables.default)('purple-7');
};

var tooltipPortalId;

var getContainerStyleGeneratorOptions = function getContainerStyleGeneratorOptions(
buttonType,
theme)
{
  if (theme === _themes.FeatherThemeEnum.Gray) {
    var _sharedStyle = {
      activeBgColor: (0, _cssVariables.default)('neutral-5'),
      bgColor: 'transparent',
      borderColor: 'transparent',
      disabledBgColor: 'transparent',
      disabledBorderColor: 'transparent',
      hoverBgColor: (0, _cssVariables.default)('neutral-3'),
      pressedBgColor: (0, _cssVariables.default)('purple-3'),
      pressedContentColor: (0, _cssVariables.default)('purple-7') };


    switch (buttonType) {
      case 'tertiary':
        return _objectSpread(_objectSpread({},
        _sharedStyle), {}, {
          activeContentColor: (0, _cssVariables.default)('purple-9'),
          contentColor: (0, _cssVariables.default)('neutral-7'),
          disabledContentColor: (0, _cssVariables.default)('neutral-6'),
          hoverContentColor: (0, _cssVariables.default)('neutral-7') });

      default:
        return _objectSpread(_objectSpread({},
        _sharedStyle), {}, {
          activeContentColor: (0, _cssVariables.default)('purple-9'),
          contentColor: (0, _cssVariables.default)('neutral-9'),
          disabledContentColor: (0, _cssVariables.default)('neutral-5'),
          hoverContentColor: (0, _cssVariables.default)('neutral-9') });}


  }

  if (theme === _themes.FeatherThemeEnum.Neutral) {
    return {
      activeBgColor: (0, _cssVariables.default)('neutral-7'),
      activeContentColor: 'white',
      bgColor: 'transparent',
      borderColor: 'transparent',
      contentColor: 'white',
      disabledBgColor: 'transparent',
      disabledBorderColor: 'transparent',
      disabledContentColor: (0, _cssVariables.default)('neutral-6'),
      hoverBgColor: (0, _cssVariables.default)('neutral-8'),
      hoverContentColor: 'white',
      pressedBgColor: (0, _cssVariables.default)('neutral-10'),
      pressedContentColor: 'white' };

  }

  if (theme === _themes.FeatherThemeEnum.Purple) {
    return {
      activeBgColor: (0, _cssVariables.default)('purple-9'),
      activeContentColor: 'white',
      bgColor: 'transparent',
      borderColor: 'transparent',
      contentColor: (0, _cssVariables.default)('purple-3'),
      disabledBgColor: 'transparent',
      disabledBorderColor: 'transparent',
      disabledContentColor: (0, _cssVariables.default)('purple-4'),
      hoverBgColor: (0, _cssVariables.default)('purple-8'),
      hoverContentColor: 'white',
      pressedBgColor: (0, _cssVariables.default)('purple-8'),
      pressedContentColor: 'white',
      focusOutlineColor: 'white' };

  }

  var sharedStyle = {
    pressedContentColor: (0, _cssVariables.default)('purple-7'),
    disabledContentColor: (0, _cssVariables.default)('neutral-5'),
    bgColor: 'transparent',
    hoverBgColor: (0, _cssVariables.default)('neutral-2'),
    activeBgColor: (0, _cssVariables.default)('neutral-3'),
    pressedBgColor: (0, _cssVariables.default)('purple-2'),
    disabledBgColor: 'transparent',
    borderColor: 'transparent',
    disabledBorderColor: 'transparent' };


  switch (buttonType) {
    case 'primary':
      return _objectSpread({
        contentColor: (0, _cssVariables.default)('purple-7'),
        hoverContentColor: (0, _cssVariables.default)('purple-7'),
        activeContentColor: (0, _cssVariables.default)('purple-7') },
      sharedStyle);

    case 'secondary':
      return _objectSpread({
        contentColor: (0, _cssVariables.default)('neutral-10'),
        hoverContentColor: (0, _cssVariables.default)('neutral-10'),
        activeContentColor: (0, _cssVariables.default)('neutral-10') },
      sharedStyle);

    default:
      return _objectSpread({
        contentColor: (0, _cssVariables.default)('neutral-6'),
        hoverContentColor: (0, _cssVariables.default)('neutral-6'),
        activeContentColor: (0, _cssVariables.default)('neutral-6') },
      sharedStyle);}


};

var getIconSize = function getIconSize(iconSize) {
  if (typeof iconSize === 'number') {
    return iconSize;
  }

  return {
    small: 20,
    xsmall: 16 }[
  iconSize];
};

var SpinnerWrapper = _styledComponents.default.div.withConfig({ displayName: "IconButton__SpinnerWrapper", componentId: "fut1xr-0" })(["position:absolute;top:0;right:0;bottom:0;left:0;display:flex;align-items:center;justify-content:center;"]);










var StyledButton = _styledComponents.default.button.withConfig({ displayName: "IconButton__StyledButton", componentId: "fut1xr-1" })([":disabled{cursor:", ";}", " ", " ", ""],

function (props) {return props.disabled && !props.isLoading ? 'not-allowed' : 'progress';},


function (_ref) {var size = _ref.size;
  switch (size) {
    case 'xsmall':
      return (0, _styledComponents.css)(["width:24px;height:24px;"]);



    case 'small':
    default:
      return (0, _styledComponents.css)(["width:32px;height:32px;"]);}




},

function (_ref2) {var buttonType = _ref2.buttonType,theme = _ref2.theme;
  var containerStyleGeneratorOptions = getContainerStyleGeneratorOptions(buttonType, theme);
  var contentColor =
  containerStyleGeneratorOptions.contentColor,hoverContentColor = containerStyleGeneratorOptions.hoverContentColor,activeContentColor = containerStyleGeneratorOptions.activeContentColor,pressedContentColor = containerStyleGeneratorOptions.pressedContentColor,disabledContentColor = containerStyleGeneratorOptions.disabledContentColor;

  return [
  (0, _styleGenerators.generateButtonContainerStyle)(containerStyleGeneratorOptions), (0,
  _styledComponents.css)(["svg{fill:", ";transition:fill 0.2s ", ";}:hover svg{fill:", ";}:active svg{fill:", ";}&[aria-pressed='true'] svg{fill:", ";}:disabled svg{fill:", ";}"],

  contentColor,
  _animation.transitionDefault,



  hoverContentColor,



  activeContentColor,



  pressedContentColor,



  disabledContentColor)];



},

function (props) {return (
    props.isLoading && (0,
    _styledComponents.css)(["svg{fill:transparent !important;}"]));});






var InlineBlockTooltip = (0, _styledComponents.default)(_tooltip.Tooltip).withConfig({ displayName: "IconButton__InlineBlockTooltip", componentId: "fut1xr-2" })(["display:inline-block;"]);



var IconButtonStyleable = /*#__PURE__*/(0, _react.forwardRef)(
function (_ref3,












ref)
{var buttonType = _ref3.buttonType,size = _ref3.size,icon = _ref3.icon,iconSize = _ref3.iconSize,_ref3$isLoading = _ref3.isLoading,isLoading = _ref3$isLoading === void 0 ? false : _ref3$isLoading,title = _ref3.title,className = _ref3.className,_ref3$tooltipPlacemen = _ref3.tooltipPlacement,tooltipPlacement = _ref3$tooltipPlacemen === void 0 ? 'top' : _ref3$tooltipPlacemen,_ref3$type = _ref3.type,type = _ref3$type === void 0 ? 'button' : _ref3$type,rest = _objectWithoutProperties(_ref3, ["buttonType", "size", "icon", "iconSize", "isLoading", "title", "className", "tooltipPlacement", "type"]);
  var theme = (0, _themes.useFeatherTheme)();
  var buttonProps = _objectSpread(_objectSpread({
    children: /*#__PURE__*/
    (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, { children: [
      isLoading && /*#__PURE__*/
      (0, _jsxRuntime.jsx)(SpinnerWrapper, { children: /*#__PURE__*/
        (0, _jsxRuntime.jsx)(_spinner.Spinner, { size: 16, stroke: getSpinnerColor(theme, buttonType) }) }), /*#__PURE__*/


      (0, _jsxRuntime.jsx)(_icon.Icon, { icon: icon, size: getIconSize(iconSize || size) })] }),


    size: size,
    buttonType: buttonType,
    isLoading: isLoading,
    theme: theme,
    type: type,
    'aria-label': title },
  hideOutlineEventListeners),
  rest);


  if ((0, _isEmpty.default)(title)) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(StyledButton, _objectSpread({ ref: ref, className: className }, buttonProps));
  }

  return /*#__PURE__*/(
    (0, _jsxRuntime.jsx)(InlineBlockTooltip, {
      className: className,
      variant: _tooltip.TooltipVariant.Dark,
      content: title,
      placement: tooltipPlacement,
      portalId: tooltipPortalId,
      popperProps: { modifiers: { offset: { offset: '0, 4' } } }, children: /*#__PURE__*/

      (0, _jsxRuntime.jsx)(StyledButton, _objectSpread({ ref: ref }, buttonProps)) }));


});


var StyledIconButton = (0, _styledComponents.default)(IconButtonStyleable).withConfig({ displayName: "IconButton__StyledIconButton", componentId: "fut1xr-3" })([""]);

var IconButton = StyledIconButton;exports.IconButton = IconButton;







IconButton.setTooltipPortalId = function (id) {
  tooltipPortalId = id || undefined;
};