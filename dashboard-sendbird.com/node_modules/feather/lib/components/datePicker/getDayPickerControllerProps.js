"use strict";require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.getDayPickerControllerProps = void 0;var _CalendarDay = _interopRequireDefault(require("react-dates/lib/components/CalendarDay"));
var _styledComponents = _interopRequireDefault(require("styled-components"));



var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));


var _button = require("../button");
var _dayPickerPhrases = require("./dayPickerPhrases");
var _getTodayDate = require("./utils/getTodayDate");
var _isSameDay = require("./utils/isSameDay");var _jsxRuntime = require("react/jsx-runtime");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var TodayDot = _styledComponents.default.div.withConfig({ displayName: "getDayPickerControllerProps__TodayDot", componentId: "vrw0z9-0" })(["width:4px;height:4px;border-radius:2px;background:", ";position:absolute;top:24px;left:14px;"],



function (props) {var _props$color;return (_props$color = props.color) !== null && _props$color !== void 0 ? _props$color : (0, _cssVariables.default)('purple-7');});





var renderNavButton = function renderNavButton(props) {return function (reactDatesProps) {return /*#__PURE__*/(

      (0, _jsxRuntime.jsx)(_button.IconButton, _objectSpread(_objectSpread({
        className: "DayPickerNavigation_button__horizontal",
        buttonType: "secondary",
        size: "small" },
      props),
      reactDatesProps)));};};



var renderCalendarDay = function renderCalendarDay(timezone) {return function (props) {
    var renderDayContents = function renderDayContents(day, modifiers) {
      var today = (0, _getTodayDate.getTodayDate)(timezone);
      var isToday = (0, _isSameDay.isSameDay)(today, day);

      // 'today' value in modifier is initialized by react-dates without considering timezone.
      if (modifiers.has('today') && !isToday) {
        modifiers.delete('today');
      }
      if (!modifiers.has('today') && isToday) {
        modifiers.add('today');
      }
      return /*#__PURE__*/(
        (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, { children: [
          day.format('D'),
          modifiers.has('today') && /*#__PURE__*/
          (0, _jsxRuntime.jsx)(TodayDot, {
            color:
            modifiers.has('selected-start') || modifiers.has('selected-end') ? 'white' : (0, _cssVariables.default)('purple-7') })] }));





    };

    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CalendarDay.default, _objectSpread(_objectSpread({}, props), {}, { renderDayContents: renderDayContents }));
  };};

var getDayPickerControllerProps = function getDayPickerControllerProps(timezone) {return {
    renderNavPrevButton: renderNavButton({ icon: 'chevron-left', 'aria-label': _dayPickerPhrases.DayPickerPhrases.jumpToPrevMonth }),
    renderNavNextButton: renderNavButton({ icon: 'chevron-right', 'aria-label': _dayPickerPhrases.DayPickerPhrases.jumpToNextMonth }),
    transitionDuration: 0,
    hideKeyboardShortcutsPanel: true,
    horizontalMonthPadding: 12,
    daySize: 32,
    noBorder: true,
    renderWeekHeaderElement: function renderWeekHeaderElement(day) {return day[0];},
    renderCalendarDay: renderCalendarDay(timezone),
    phrases: _dayPickerPhrases.DayPickerPhrases };};exports.getDayPickerControllerProps = getDayPickerControllerProps;