"use strict";function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.from.js");require("core-js/modules/es.weak-map.js");Object.defineProperty(exports, "__esModule", { value: true });exports.DateRangePicker = exports.convertDateRangePickerValueToDateRange = exports.convertDateRangeToDateRangePickerValue = void 0;require("core-js/modules/es.array.splice.js");require("core-js/modules/es.array.join.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.array.map.js");require("core-js/modules/es.array.concat.js");require("core-js/modules/es.array.find.js");require("core-js/modules/es.object.values.js");var _react = require("react");










var _reactDates = require("react-dates");
require("react-dates/initialize");
var _constants = require("react-dates/lib/constants");
var _isAfterDay = _interopRequireDefault(require("react-dates/lib/utils/isAfterDay"));
var _isInclusivelyAfterDay = _interopRequireDefault(require("react-dates/lib/utils/isInclusivelyAfterDay"));
var _reactPopper = require("react-popper");
var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _flow = _interopRequireDefault(require("lodash/flow"));
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _types = require("../../../lib/components/tooltip/types");
var _elevation = require("../../../lib/elevation");
var _cssVariables = _interopRequireDefault(require("../../../lib/theme/cssVariables"));

var _zIndexes = require("../../../lib/zIndexes");

var _button = require("../button");
var _dropdown = require("../dropdown");
var _notification = require("../notification");
var _constants2 = require("./constants");
var _getDayPickerControllerProps = require("./getDayPickerControllerProps");
var _ToggleText = require("./ToggleText");
var _types2 = require("./types");
var _useStylesheet = require("./useStylesheet");
var _getTodayDate = require("./utils/getTodayDate");var _jsxRuntime = require("react/jsx-runtime");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







































































var getDropdownItems = function getDropdownItems(_ref) {var minimumNights = _ref.minimumNights,maximumNights = _ref.maximumNights,dropdownItems = _ref.dropdownItems;
  var predefinedDateRangeItems = [
  dropdownItems.today,
  dropdownItems.yesterday,
  dropdownItems.last7Days,
  dropdownItems.last14Days,
  dropdownItems.last30Days,
  dropdownItems.last90Days];


  if (maximumNights) {
    if (maximumNights >= 89) predefinedDateRangeItems.splice(6);else
    if (maximumNights >= 29) predefinedDateRangeItems.splice(5);else
    if (maximumNights >= 13) predefinedDateRangeItems.splice(4);else
    if (maximumNights >= 6) predefinedDateRangeItems.splice(3);else
    if (maximumNights >= 2) predefinedDateRangeItems.splice(2);else
    if (maximumNights === 1) predefinedDateRangeItems.splice(1);
  } else {
    predefinedDateRangeItems.push(dropdownItems.allDates);
  }

  if (minimumNights) {
    if (minimumNights > 90) predefinedDateRangeItems.splice(0, 6);else
    if (minimumNights > 30) predefinedDateRangeItems.splice(0, 5);else
    if (minimumNights > 14) predefinedDateRangeItems.splice(0, 4);else
    if (minimumNights > 7) predefinedDateRangeItems.splice(0, 3);else
    if (minimumNights > 1) predefinedDateRangeItems.splice(0, 2);
  }

  return [{ items: predefinedDateRangeItems }, { items: [dropdownItems.custom] }];
};

var formatDateRange = function formatDateRange(v, dateFormatter) {return (
    [v.startDate, v.endDate].
    map(function (date) {return dateFormatter(date);}).
    filter(function (value, index, array) {return value !== array[index - 1];}) // remove duplication
    .join(' â€” '));};

/**
 * Make the date range to include from 00:00 on the start date to 23:59.999 on the end date so that milliseconds
 * calculation will be accurate.
 */
var makeDateRangeWhole = function makeDateRangeWhole(dateRange) {
  if (dateRange == null) {
    return dateRange;
  }
  var startDate = dateRange.startDate,endDate = dateRange.endDate;
  return {
    startDate: (0, _momentTimezone.default)(startDate).startOf('day'),
    endDate: (0, _momentTimezone.default)(endDate).endOf('day') };

};

var dateRangePickerValueMap = {
  7: _types2.DateRangePickerValue.Last7Days,
  14: _types2.DateRangePickerValue.Last14Days,
  30: _types2.DateRangePickerValue.Last30Days,
  90: _types2.DateRangePickerValue.Last90Days };


var convertDateRangeToDateRangePickerValue = function convertDateRangeToDateRangePickerValue(startDate, endDate) {
  var todayMoment = (0, _momentTimezone.default)();
  var startDateMoment = (0, _momentTimezone.default)(startDate);
  var endDateMoment = (0, _momentTimezone.default)(endDate);
  var isEqualStartDateEndDate = startDateMoment.diff(endDateMoment, 'days') === 0;
  var isEndDateToday = endDateMoment.diff(todayMoment, 'days') === 0;

  if (endDateMoment.diff(startDateMoment, 'days') < 0) {
    throw new Error('The start date cannot be later than end date.');
  }

  if (!startDate || !endDate) {
    return _types2.DateRangePickerValue.AllDates;
  }

  if (isEqualStartDateEndDate && isEndDateToday) {
    return _types2.DateRangePickerValue.Today;
  }

  if (isEqualStartDateEndDate && todayMoment.diff(startDateMoment, 'days') === 1) {
    return _types2.DateRangePickerValue.Yesterday;
  }

  var pickerValue = isEndDateToday ?
  dateRangePickerValueMap[endDateMoment.diff(startDateMoment, 'days') + 1] :
  undefined;
  if (!pickerValue) {
    return _types2.DateRangePickerValue.Custom;
  }

  return pickerValue;
};exports.convertDateRangeToDateRangePickerValue = convertDateRangeToDateRangePickerValue;

var convertDateRangePickerValueToDateRange = function convertDateRangePickerValueToDateRange(
value,
timezone)
{
  var endDate = (0, _getTodayDate.getTodayDate)(timezone);
  var startDate = endDate.clone();
  switch (value) {
    case _types2.DateRangePickerValue.Today:
      return { startDate: endDate, endDate: endDate };
    case _types2.DateRangePickerValue.Yesterday:{
        var yesterday = endDate.subtract(1, 'day');
        return {
          startDate: yesterday,
          endDate: yesterday };

      }
    case _types2.DateRangePickerValue.Last7Days:
      return {
        startDate: startDate.subtract(6, 'day'),
        endDate: endDate };

    case _types2.DateRangePickerValue.Last14Days:
      return {
        startDate: startDate.subtract(13, 'day'),
        endDate: endDate };

    case _types2.DateRangePickerValue.Last30Days:
      return {
        startDate: startDate.subtract(29, 'day'),
        endDate: endDate };

    case _types2.DateRangePickerValue.Last90Days:
      return {
        startDate: startDate.subtract(89, 'day'),
        endDate: endDate };

    default:
      return undefined;}

};exports.convertDateRangePickerValueToDateRange = convertDateRangePickerValueToDateRange;

var convertDateRangePickerValueToWholeDateRange = (0, _flow.default)(



convertDateRangePickerValueToDateRange, makeDateRangeWhole);

var hideDropdownClickInterceptor = function hideDropdownClickInterceptor(node) {
  if (node) {
    node.style.width = '0';
    node.style.height = '0';
  }
};

var DayPickerWrapper = _styledComponents.default.div.withConfig({ displayName: "DateRangePicker__DayPickerWrapper", componentId: "dwhzi-0" })(["position:absolute;display:flex;flex-direction:column;align-items:stretch;justify-content:flex-end;border-radius:4px;overflow:hidden;", " z-index:", ";background:white;width:", ";"],







_elevation.elevation.popover,
_zIndexes.ZIndexes.dropdownMenu,

function (_ref2) {var width = _ref2.width;
  if (width) {
    if (typeof width === 'number') {
      return "".concat(width, "px");
    }

    return width;
  }
  return null;
});


var DateRangePickerWrapper = _styledComponents.default.div.withConfig({ displayName: "DateRangePicker__DateRangePickerWrapper", componentId: "dwhzi-1" })(["position:relative;", ""],


function (props) {return (
    props.fullWidth && (0,
    _styledComponents.css)(["width:100%;"]));});




var DatePickerDropdownProxy = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return (
    (0, _dropdown.Dropdown)(_objectSpread(_objectSpread({}, props), {}, { ref: ref })));});


var DatePickerDropdown = (0, _styledComponents.default)(DatePickerDropdownProxy).withConfig({ displayName: "DateRangePicker__DatePickerDropdown", componentId: "dwhzi-2" })(["", ""],
function (props) {return (
    props.isDayPickerVisible &&
    // If the calendar is visible, dropdown must be look like it's active.
    "\n    color: ".concat(
    (0, _cssVariables.default)('purple-7'), " !important;\n    border-color: ").concat(
    (0, _cssVariables.default)('purple-7'), " !important;\n    background-color: ").concat(
    (0, _cssVariables.default)('purple-2'), " !important;\n\n    ").concat(

    _dropdown.DropdownToggleIcon, " {\n      fill: ").concat(
    (0, _cssVariables.default)('purple-7'), " !important;\n    }\n\n    /* Arrow icon */\n    ").concat(



    _dropdown.DropdownToggleIcon, " {\n      transform: rotate(180deg);\n    }\n  "));});





var DropdownClickEventInterceptor = _styledComponents.default.div.withConfig({ displayName: "DateRangePicker__DropdownClickEventInterceptor", componentId: "dwhzi-3" })(["position:absolute;top:0;left:0;cursor:pointer;"]);






var ButtonContainer = _styledComponents.default.div.withConfig({ displayName: "DateRangePicker__ButtonContainer", componentId: "dwhzi-4" })(["display:grid;grid-auto-flow:column;grid-gap:16px;justify-content:end;padding:16px;box-shadow:inset ", " 0 1px;margin-top:-3px;z-index:1;"],





(0, _cssVariables.default)('neutral-3'));






var DateRangePicker = function DateRangePicker(_ref3)



















{var _itemLabel$today, _itemLabel$yesterday, _itemLabel$last7Days, _itemLabel$last14Days, _itemLabel$last30Days, _itemLabel$last90Days, _itemLabel$allDates, _itemLabel$custom;var value = _ref3.value,dropdownProps = _ref3.dropdownProps,dayPickerProps = _ref3.dayPickerProps,dateRange = _ref3.dateRange,onChange = _ref3.onChange,timezone = _ref3.timezone,_ref3$enableOutsideDa = _ref3.enableOutsideDays,enableOutsideDays = _ref3$enableOutsideDa === void 0 ? false : _ref3$enableOutsideDa,_ref3$minimumNights = _ref3.minimumNights,minimumNights = _ref3$minimumNights === void 0 ? 0 : _ref3$minimumNights,_ref3$maximumNights = _ref3.maximumNights,maximumNights = _ref3$maximumNights === void 0 ? undefined : _ref3$maximumNights,_ref3$placement = _ref3.placement,placement = _ref3$placement === void 0 ? 'bottom-start' : _ref3$placement,_ref3$fullWidth = _ref3.fullWidth,fullWidth = _ref3$fullWidth === void 0 ? false : _ref3$fullWidth,_ref3$minDate = _ref3.minDate,minDate = _ref3$minDate === void 0 ? null : _ref3$minDate,_ref3$maxDate = _ref3.maxDate,maxDate = _ref3$maxDate === void 0 ? null : _ref3$maxDate,_ref3$disabled = _ref3.disabled,disabled = _ref3$disabled === void 0 ? false : _ref3$disabled,_ref3$size = _ref3.size,size = _ref3$size === void 0 ? 'medium' : _ref3$size,_ref3$formatDate = _ref3.formatDate,formatDate = _ref3$formatDate === void 0 ? _constants2.defaultDateFormatter : _ref3$formatDate,_ref3$confirmText = _ref3.confirmText,confirmText = _ref3$confirmText === void 0 ? 'Apply' : _ref3$confirmText,_ref3$cancelText = _ref3.cancelText,cancelText = _ref3$cancelText === void 0 ? 'Cancel' : _ref3$cancelText,itemLabel = _ref3.itemLabel;
  var _useState =
  (0, _react.useState)(),_useState2 = _slicedToArray(_useState, 2),dayPickerRange = _useState2[0],setDayPickerRange = _useState2[1];
  var _useState3 = (0, _react.useState)(null),_useState4 = _slicedToArray(_useState3, 2),focusedInput = _useState4[0],setFocusedInput = _useState4[1];
  var dropdownRef = (0, _react.useRef)(null);
  var dropdownClickEventInterceptorRef = (0, _react.useRef)(null);
  var scheduleUpdateRef = (0, _react.useRef)();

  var dateRangeDropdownItems = {
    today: {
      value: _types2.DateRangePickerValue.Today,
      label: (_itemLabel$today = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.today) !== null && _itemLabel$today !== void 0 ? _itemLabel$today : _types2.DateRangePickerValue.Today },

    yesterday: {
      value: _types2.DateRangePickerValue.Yesterday,
      label: (_itemLabel$yesterday = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.yesterday) !== null && _itemLabel$yesterday !== void 0 ? _itemLabel$yesterday : _types2.DateRangePickerValue.Yesterday },

    last7Days: {
      value: _types2.DateRangePickerValue.Last7Days,
      label: (_itemLabel$last7Days = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.last7Days) !== null && _itemLabel$last7Days !== void 0 ? _itemLabel$last7Days : _types2.DateRangePickerValue.Last7Days },

    last14Days: {
      value: _types2.DateRangePickerValue.Last14Days,
      label: (_itemLabel$last14Days = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.last14Days) !== null && _itemLabel$last14Days !== void 0 ? _itemLabel$last14Days : _types2.DateRangePickerValue.Last14Days },

    last30Days: {
      value: _types2.DateRangePickerValue.Last30Days,
      label: (_itemLabel$last30Days = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.last30Days) !== null && _itemLabel$last30Days !== void 0 ? _itemLabel$last30Days : _types2.DateRangePickerValue.Last30Days },

    last90Days: {
      value: _types2.DateRangePickerValue.Last90Days,
      label: (_itemLabel$last90Days = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.last90Days) !== null && _itemLabel$last90Days !== void 0 ? _itemLabel$last90Days : _types2.DateRangePickerValue.Last90Days },

    allDates: {
      value: _types2.DateRangePickerValue.AllDates,
      label: (_itemLabel$allDates = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.allDates) !== null && _itemLabel$allDates !== void 0 ? _itemLabel$allDates : _types2.DateRangePickerValue.AllDates },

    custom: {
      value: _types2.DateRangePickerValue.Custom,
      label: (_itemLabel$custom = itemLabel === null || itemLabel === void 0 ? void 0 : itemLabel.custom) !== null && _itemLabel$custom !== void 0 ? _itemLabel$custom : _types2.DateRangePickerValue.Custom } };



  (0, _useStylesheet.useStylesheet)();

  var isDayPickerVisible = !!(focusedInput && dayPickerRange);
  var selectedItem = isDayPickerVisible ?
  dateRangeDropdownItems.custom :
  Object.values(dateRangeDropdownItems).find(function (item) {return item.value === value;});

  var isOutsideRange =
  maximumNights == null || focusedInput == null ?
  undefined :
  function () {
    if (focusedInput === _constants.START_DATE) {
      if ((dayPickerRange === null || dayPickerRange === void 0 ? void 0 : dayPickerRange.endDate) == null) {
        return undefined;
      }
      var earliestStartDate = dayPickerRange.endDate.clone().subtract(maximumNights, 'days');
      return function (day) {return !(0, _isInclusivelyAfterDay.default)(day, earliestStartDate);};
    }
    if (focusedInput === _constants.END_DATE) {
      if ((dayPickerRange === null || dayPickerRange === void 0 ? void 0 : dayPickerRange.startDate) == null) {
        return undefined;
      }
      var maximumEndDate = dayPickerRange.startDate.clone().add(maximumNights, 'days');
      return function (day) {return (0, _isAfterDay.default)(day, maximumEndDate);};
    }
  }();

  var getToggleText = function getToggleText(item) {
    if (!item) return '';
    if (item.value === _types2.DateRangePickerValue.Custom) {
      var toggleDisplayedDateRange =
      dayPickerRange && dayPickerRange.startDate && dayPickerRange.endDate ?
      dayPickerRange :
      dateRange;

      if (toggleDisplayedDateRange) {
        return formatDateRange(toggleDisplayedDateRange, formatDate);
      }
    }
    return item.label;
  };

  var toggleText = getToggleText(selectedItem);

  (0, _react.useEffect)(function () {
    if (!isDayPickerVisible) {
      hideDropdownClickInterceptor(dropdownClickEventInterceptorRef.current);
      return;
    }

    if (dropdownClickEventInterceptorRef.current && dropdownRef.current) {var _scheduleUpdateRef$cu;
      dropdownClickEventInterceptorRef.current.style.zIndex = String(
      getComputedStyle(dropdownClickEventInterceptorRef.current).zIndex + 1);

      dropdownClickEventInterceptorRef.current.style.width = "".concat(dropdownRef.current.clientWidth, "px");
      dropdownClickEventInterceptorRef.current.style.height = "".concat(dropdownRef.current.clientHeight, "px");

      (_scheduleUpdateRef$cu = scheduleUpdateRef.current) === null || _scheduleUpdateRef$cu === void 0 ? void 0 : _scheduleUpdateRef$cu.call(scheduleUpdateRef);
    }
  }, [toggleText, size, isDayPickerVisible]);

  var toggleRenderer = function toggleRenderer(_ref4) {var selectedItem = _ref4.selectedItem;return /*#__PURE__*/(
      (0, _jsxRuntime.jsx)(_ToggleText.ToggleText, { size: size, children: getToggleText(selectedItem) }));};


  var notifyChange = function notifyChange(value, customDateRange) {
    if (value === _types2.DateRangePickerValue.Custom && customDateRange == null) {
      return;
    }

    var dateRange =
    value === _types2.DateRangePickerValue.Custom ?
    customDateRange :
    convertDateRangePickerValueToWholeDateRange(value, timezone);
    onChange === null || onChange === void 0 ? void 0 : onChange(value, dateRange);
  };

  var onItemSelected = function onItemSelected(item) {
    if (item == null) {
      return;
    }
    if (onChange == null) {
      return;
    }

    if (item.value === _types2.DateRangePickerValue.Custom) {
      // Don't call onChange until a custom date range is set.
      setDayPickerRange(dateRange || { startDate: null, endDate: null });
      setFocusedInput(_constants.START_DATE);
      return;
    }
    notifyChange(item.value);
  };

  var onDropdownClickEventInterceptorClick = function onDropdownClickEventInterceptorClick() {
    hideDropdownClickInterceptor(dropdownClickEventInterceptorRef.current);
    setDayPickerRange(undefined);
  };

  var onDayPickerDatesChange = function onDayPickerDatesChange(_ref5)


  {var startDate = _ref5.startDate,endDate = _ref5.endDate;
    setDayPickerRange({ startDate: startDate, endDate: endDate });
    if (startDate && endDate) {
      // If both startDate and endDate are defined, set focusedInput to START_DATE
      // so that the next click on a day will set the start date.
      setFocusedInput(_constants.START_DATE);
    }
  };

  var onDayPickerFocusChange = function onDayPickerFocusChange(focusedInput) {
    setFocusedInput(focusedInput || _constants.START_DATE);
  };

  var onDayPickerCancelButtonClick = function onDayPickerCancelButtonClick() {
    hideDropdownClickInterceptor(dropdownClickEventInterceptorRef.current);
    setDayPickerRange(undefined);
  };

  var onDayPickerApplyButtonClick = function onDayPickerApplyButtonClick() {
    if (dayPickerRange == null) {
      return;
    }
    var startDate = dayPickerRange.startDate,endDate = dayPickerRange.endDate;
    if (startDate == null) {
      _notification.toast.error({ message: 'Select the start date.' });
      return;
    }
    if (endDate == null) {
      _notification.toast.error({ message: 'Select the end date.' });
      return;
    }

    notifyChange(_types2.DateRangePickerValue.Custom, makeDateRangeWhole({ startDate: startDate, endDate: endDate }));

    // Close the calendar.
    hideDropdownClickInterceptor(dropdownClickEventInterceptorRef.current);
    setFocusedInput(null);
  };

  var tooltipText = function () {
    if (value === _types2.DateRangePickerValue.Custom || isDayPickerVisible) {
      return undefined;
    }

    var specificDateRange = convertDateRangePickerValueToWholeDateRange(value, timezone);
    return specificDateRange ? formatDateRange(specificDateRange, formatDate) : undefined;
  }();

  var handleBlockedDate = (0, _react.useCallback)(
  function (day) {
    if (minDate && (0, _momentTimezone.default)(day).isBefore(minDate, 'date')) {
      return true;
    }
    if (maxDate && (0, _momentTimezone.default)(day).isAfter(maxDate, 'date')) {
      return true;
    }
    return false;
  },
  [minDate, maxDate]);

  var dropdownWidth = (0, _react.useMemo)(function () {
    if (dropdownProps !== null && dropdownProps !== void 0 && dropdownProps.width) return dropdownProps.width;
    return fullWidth ? '100%' : 'auto';
  }, [fullWidth, dropdownProps === null || dropdownProps === void 0 ? void 0 : dropdownProps.width]);
  return /*#__PURE__*/(
    (0, _jsxRuntime.jsxs)(DateRangePickerWrapper, { fullWidth: fullWidth, children: [/*#__PURE__*/
      (0, _jsxRuntime.jsx)(DatePickerDropdown, _objectSpread(_objectSpread({
        ref: dropdownRef,
        isDayPickerVisible: isDayPickerVisible,
        selectedItem: selectedItem,
        itemsType: "section",
        items: getDropdownItems({
          minimumNights: minimumNights,
          maximumNights: maximumNights,
          dropdownItems: dateRangeDropdownItems }),

        size: size,
        toggleRenderer: toggleRenderer,
        onItemSelected: onItemSelected,
        itemToString: function itemToString(item) {return item.label;},
        placement: placement,
        disabled: disabled },
      dropdownProps), {}, {
        tooltipProps:
        tooltipText ? _objectSpread({

          variant: _types.TooltipVariant.Light,
          content: tooltipText,
          placement: 'top' },
        dropdownProps === null || dropdownProps === void 0 ? void 0 : dropdownProps.tooltipProps) :

        undefined,

        width: dropdownWidth })), /*#__PURE__*/

      (0, _jsxRuntime.jsxs)(_reactPopper.Manager, { children: [/*#__PURE__*/
        (0, _jsxRuntime.jsx)(_reactPopper.Reference, { innerRef: dropdownClickEventInterceptorRef, children:
          function children(_ref6) {var ref = _ref6.ref;return /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownClickEventInterceptor, { ref: ref, onClick: onDropdownClickEventInterceptorClick });} }),

        focusedInput && dayPickerRange && /*#__PURE__*/
        (0, _jsxRuntime.jsx)(_reactPopper.Popper, {
          placement: placement,
          positionFixed: dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.positionFixed,
          modifiers: dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.modifiers, children:

          function children(_ref7) {var _dayPickerRange$start, _dayPickerRange$start2, _dayPickerRange$endDa, _dayPickerRange$endDa2;var ref = _ref7.ref,style = _ref7.style,scheduleUpdate = _ref7.scheduleUpdate;
            scheduleUpdateRef.current = scheduleUpdate;
            return /*#__PURE__*/(
              (0, _jsxRuntime.jsxs)(DayPickerWrapper, {
                ref: ref,
                style: _objectSpread(_objectSpread({}, style), {}, { top: 2 }),
                className: "DateRangePicker__DayPickerWrapper",
                "data-start-date": (_dayPickerRange$start = (_dayPickerRange$start2 = dayPickerRange.startDate) === null || _dayPickerRange$start2 === void 0 ? void 0 : _dayPickerRange$start2.format('YYYY-MM-DD')) !== null && _dayPickerRange$start !== void 0 ? _dayPickerRange$start : '',
                "data-end-date": (_dayPickerRange$endDa = (_dayPickerRange$endDa2 = dayPickerRange.endDate) === null || _dayPickerRange$endDa2 === void 0 ? void 0 : _dayPickerRange$endDa2.format('YYYY-MM-DD')) !== null && _dayPickerRange$endDa !== void 0 ? _dayPickerRange$endDa : '', children: [/*#__PURE__*/

                (0, _jsxRuntime.jsx)(_reactDates.DayPickerRangeController, _objectSpread({
                  startDate: dayPickerRange.startDate,
                  endDate: dayPickerRange.endDate,
                  onDatesChange: onDayPickerDatesChange,
                  onFocusChange: onDayPickerFocusChange,
                  focusedInput: focusedInput,
                  enableOutsideDays: enableOutsideDays,
                  minimumNights: Math.max(0, minimumNights),
                  isOutsideRange: isOutsideRange,
                  isDayBlocked: handleBlockedDate,
                  numberOfMonths: 2,
                  keepOpenOnDateSelect: true },
                (0, _getDayPickerControllerProps.getDayPickerControllerProps)(timezone))), /*#__PURE__*/

                (0, _jsxRuntime.jsxs)(ButtonContainer, { children: [/*#__PURE__*/
                  (0, _jsxRuntime.jsx)(_button.Button, { buttonType: "tertiary", size: "small", onClick: onDayPickerCancelButtonClick, children:
                    cancelText }), /*#__PURE__*/

                  (0, _jsxRuntime.jsx)(_button.Button, { buttonType: "primary", size: "small", onClick: onDayPickerApplyButtonClick, children:
                    confirmText })] })] }));




          } })] })] }));





};exports.DateRangePicker = DateRangePicker;