"use strict";require("core-js/modules/es.object.keys.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.object.get-own-property-descriptor.js");require("core-js/modules/web.dom-collections.for-each.js");require("core-js/modules/es.object.get-own-property-descriptors.js");Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.data = exports.extensions = exports.core = exports.foundation = exports.primitive = void 0;var _merge = _interopRequireDefault(require("lodash/fp/merge"));
var _rgba = _interopRequireDefault(require("polished/lib/color/rgba"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var primitive = {
  yellow: {
    10: '#4B2F0F',
    9: '#673E0D',
    8: '#844B08',
    7: '#AA5D04',
    6: '#D37300',
    5: '#FFC233',
    4: '#FED75C',
    3: '#FEE678',
    2: '#FFF2B6',
    1: '#FFF7DA' },

  orange: {
    10: '#45220D',
    9: '#642E0D',
    8: '#8A3B0C',
    7: '#AD480C',
    6: '#D25309',
    5: '#FF8D4B',
    4: '#FFAB52',
    3: '#FCC47C',
    2: '#FFDEC0',
    1: '#FFEADD' },

  red: {
    10: '#5C101B',
    9: '#6D0F1C',
    8: '#8B0C1E',
    7: '#9D091E',
    6: '#BF0712',
    5: '#D9352C',
    4: '#FB6B6B',
    3: '#FDAAAA',
    2: '#FFD9DD',
    1: '#FFEEEE' },

  violet: {
    10: '#2B0B39',
    9: '#400E57',
    8: '#551174',
    7: '#6B1393',
    6: '#8012B3',
    5: '#A538D7',
    4: '#BD61DD',
    3: '#D291E9',
    2: '#F4D7FF',
    1: '#F6E7FB' },

  purple: {
    10: '#1F084C',
    9: '#350C73',
    8: '#4B11A1',
    7: '#6210CC',
    6: '#7129E5',
    5: '#854BFA',
    4: '#A184FF',
    3: '#CABDFF',
    2: '#E1DBFF',
    1: '#F0EEFF' },

  blue: {
    10: '#171743',
    9: '#212161',
    8: '#30308F',
    7: '#4141B2',
    6: '#5959D3',
    5: '#5589ED',
    4: '#79A2F2',
    3: '#ADC9FF',
    2: '#D4E5FF',
    1: '#E7F1FF' },

  green: {
    10: '#082621',
    9: '#083730',
    7: '#066858',
    8: '#084D42',
    6: '#027D69',
    5: '#259C72',
    4: '#69C085',
    3: '#A5D9A8',
    2: '#D1F0D3',
    1: '#E2FAE4' },

  neutral: {
    10: '#0D0D0D',
    9: '#2E2E2E',
    8: '#424242',
    7: '#5E5E5E',
    6: '#858585',
    5: '#A6A6A6',
    4: '#CCCCCC',
    3: '#E0E0E0',
    2: '#ECECEC',
    1: '#F7F7F7' } };exports.primitive = primitive;



var foundation = {
  primary: primitive.purple[7],
  white: '#FFFFFF',
  black: primitive.neutral[10],
  negative: primitive.red[5],
  positive: primitive.green[5],
  warning: primitive.yellow[5] };exports.foundation = foundation;


var core = {
  bg: {
    1: foundation.white,
    2: primitive.neutral[1],
    3: primitive.neutral[2],
    disabled: primitive.neutral[2],
    black: primitive.neutral[10],
    primary: {
      default: primitive.purple[7],
      disabled: primitive.purple[3],
      light: primitive.purple[2] },

    inverse: {
      1: primitive.neutral[10],
      2: primitive.neutral[9],
      3: primitive.neutral[8],
      disabled: primitive.neutral[8] } },


  content: {
    1: primitive.neutral[10],
    2: primitive.neutral[7],
    3: primitive.neutral[6],
    disabled: primitive.neutral[5],
    primary: { default: primitive.purple[7] },
    inverse: {
      1: foundation.white,
      2: primitive.neutral[3],
      3: primitive.neutral[5],
      disabled: primitive.neutral[6],
      primary: primitive.purple[3] } },


  border: {
    1: primitive.neutral[10],
    2: primitive.neutral[4],
    3: primitive.neutral[3],
    disabled: primitive.neutral[3],
    primary: { default: primitive.purple[7] },
    overlay: { default: (0, _rgba.default)(primitive.neutral[10], 0.08) },
    inverse: {
      1: foundation.white,
      2: primitive.neutral[7],
      3: primitive.neutral[8] } } };exports.core = core;




var extensions = {
  bg: {
    overlay: {
      1: (0, _rgba.default)(primitive.neutral[10], 0.04),
      2: (0, _rgba.default)(primitive.neutral[10], 0.08),
      3: (0, _rgba.default)(primitive.neutral[10], 0.16),
      4: (0, _rgba.default)(primitive.neutral[10], 0.48) },

    primary: {
      hover: primitive.purple[8],
      pressed: primitive.purple[9] },

    negative: {
      default: primitive.red[5],
      hover: primitive.red[6],
      pressed: primitive.red[7],
      light: primitive.red[2] },

    positive: {
      default: primitive.green[5],
      light: primitive.green[2] },

    warning: {
      default: primitive.yellow[5],
      light: primitive.yellow[2] },

    attention: {
      default: primitive.orange[5],
      light: primitive.orange[2] },

    inverse: {
      overlay: {
        1: (0, _rgba.default)(foundation.white, 0.08),
        2: (0, _rgba.default)(foundation.white, 0.16),
        3: (0, _rgba.default)(foundation.white, 0.32),
        disabled: (0, _rgba.default)(foundation.white, 0.08) },

      dark: {
        overlay: {
          1: (0, _rgba.default)(primitive.neutral[10], 0.08),
          2: (0, _rgba.default)(primitive.neutral[10], 0.2),
          3: (0, _rgba.default)(primitive.neutral[10], 0.4) },

        disabled: (0, _rgba.default)(primitive.neutral[10], 0.08) } } },



  content: {
    primary: {
      hover: primitive.purple[8],
      pressed: primitive.purple[9] },

    negative: primitive.red[6],
    positive: primitive.green[6],
    warning: primitive.yellow[7],
    inverse: {
      overlay: {
        1: foundation.white,
        2: (0, _rgba.default)(foundation.white, 0.72),
        3: (0, _rgba.default)(foundation.white, 0.56),
        disabled: (0, _rgba.default)(foundation.white, 0.56) } } },



  border: {
    primary: {
      hover: primitive.purple[8],
      pressed: primitive.purple[9] },

    negative: primitive.red[5],
    inverse: {
      overlay: {
        1: foundation.white,
        2: (0, _rgba.default)(foundation.white, 0.56),
        3: (0, _rgba.default)(foundation.white, 0.32) } } } };exports.extensions = extensions;





var data = {
  viz: {
    1: {
      default: primitive.purple[6],
      hover: primitive.purple[4] },

    2: {
      default: primitive.blue[6],
      hover: primitive.blue[5] },

    3: {
      default: primitive.green[4],
      hover: primitive.green[3] },

    4: {
      default: primitive.red[4],
      hover: primitive.red[3] },

    5: {
      default: primitive.violet[4],
      hover: primitive.violet[3] },

    6: {
      default: primitive.orange[4],
      hover: primitive.yellow[4] },

    7: {
      default: primitive.blue[5],
      hover: primitive.blue[3] },

    8: {
      default: primitive.orange[7],
      hover: primitive.orange[5] } } };exports.data = data;




var colorSet = _objectSpread(_objectSpread(_objectSpread({
  /**
   * Any key named `default` in `color.set` will be skipped when creating css variables.
   * e.g.
   * FROM | border: { primary : { default: primitive.neutral[10] } }
   * TO   | --border-primary: #1f084c
   */
  purple: primitive.purple,
  neutral: primitive.neutral,
  yellow: primitive.yellow,
  orange: primitive.orange,
  red: primitive.red,
  green: primitive.green,
  blue: primitive.blue,
  violet: primitive.violet },

foundation),
(0, _merge.default)(core, extensions)), {}, {
  data: data });var _default =


colorSet;exports.default = _default;