"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;require("core-js/modules/es.regexp.exec.js");require("core-js/modules/es.string.replace.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.regexp.to-string.js");require("core-js/modules/es.array.includes.js");require("core-js/modules/es.string.includes.js");require("core-js/modules/es.number.is-integer.js");require("core-js/modules/es.number.constructor.js");require("core-js/modules/es.array.join.js");require("core-js/modules/es.array.filter.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.concat.js");var replaceWhiteSpace = function replaceWhiteSpace(value) {var replaceValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
  return value.replace(/\s+/g, replaceValue);
};

var escape = function escape(value) {
  var valueStr = replaceWhiteSpace(value.toString());
  if (valueStr.includes('\\.')) return value;
  var isDecimal = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal ? valueStr.replace('.', "\\.") : value;
};

var addPrefix = function addPrefix(value) {var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return [prefix, escape(value)].filter(Boolean).join('-');
};

var toVariableReference = function toVariableReference(params) {
  var name = params.name,fallback = params.fallback;
  return "var(".concat(escape(name)).concat(fallback ? ", ".concat(fallback) : '', ")");
};

var toVariableDefinition = function toVariableDefinition(params) {
  var value = params.value,_params$prefix = params.prefix,prefix = _params$prefix === void 0 ? '' : _params$prefix;
  return "--".concat(addPrefix(value, prefix));
};

var getCssVariable = function getCssVariable(params) {
  var name = params.name,fallback = params.fallback,cssVariablePrefix = params.cssVariablePrefix;
  var cssVariable = toVariableDefinition({ value: name, prefix: cssVariablePrefix });
  return {
    variable: cssVariable,
    reference: toVariableReference({ name: cssVariable, fallback: fallback }) };

};var _default =

getCssVariable;exports.default = _default;