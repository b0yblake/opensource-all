"use strict";require("core-js/modules/es.array.from.js");require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");Object.defineProperty(exports, "__esModule", { value: true });exports.walkObject = void 0;require("core-js/modules/es.array.map.js");require("core-js/modules/es.array.concat.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.object.from-entries.js");require("core-js/modules/es.object.entries.js");require("core-js/modules/es.symbol.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}

var isArray = function isArray(value) {
  return Array.isArray(value);
};
var isObject = function isObject(value) {
  var type = _typeof(value);
  return value != null && (type === 'object' || type === 'function') && !isArray(value);
};









var walkObject = function walkObject(params)


{
  var target = params.target,predicate = params.predicate;
  var inner = function inner(value) {var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    if (isArray(value)) {
      return value.map(function (item, index) {return inner(item, [].concat(_toConsumableArray(path), [String(index)]));});
    }

    if (isObject(value)) {
      return Object.fromEntries(Object.entries(value).map(function (_ref) {var _ref2 = _slicedToArray(_ref, 2),key = _ref2[0],child = _ref2[1];return [key, inner(child, [].concat(_toConsumableArray(path), [key]))];}));
    }

    return predicate(value, path);
  };

  return inner(target);
};exports.walkObject = walkObject;