"use strict";require("core-js/modules/es.array.slice.js");require("core-js/modules/es.function.name.js");require("core-js/modules/es.array.from.js");Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.useColorMode = exports.ColorModeContext = exports.ColorModeLocalStorage = void 0;require("core-js/modules/es.symbol.js");require("core-js/modules/es.symbol.description.js");require("core-js/modules/es.object.to-string.js");require("core-js/modules/es.symbol.iterator.js");require("core-js/modules/es.array.iterator.js");require("core-js/modules/es.string.iterator.js");require("core-js/modules/web.dom-collections.iterator.js");var _react = require("react");var _jsxRuntime = require("react/jsx-runtime");function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}

var COLOR_MODE_STORAGE_KEY = 'featherColorMode';







var ColorModeLocalStorage = {
  set: function set(colorMode) {
    try {
      if ((typeof localStorage === "undefined" ? "undefined" : _typeof(localStorage)) === undefined) {
        throw new Error('There is no local storage on your environment');
      }

      localStorage.setItem(COLOR_MODE_STORAGE_KEY, colorMode);
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e);
    }
  },
  get: function get() {
    try {
      if ((typeof localStorage === "undefined" ? "undefined" : _typeof(localStorage)) === undefined) {
        throw new Error('There is no local storage on your environment');
      }

      return localStorage.getItem(COLOR_MODE_STORAGE_KEY);
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e);
      return undefined;
    }
  } };exports.ColorModeLocalStorage = ColorModeLocalStorage;


var ColorModeContext = /*#__PURE__*/(0, _react.createContext)({});exports.ColorModeContext = ColorModeContext;

var useColorMode = function useColorMode() {
  var context = (0, _react.useContext)(ColorModeContext);
  if (context === undefined) {
    throw new Error('useColorMode must be used within a ColorModeProvider');
  }
  return context;
};exports.useColorMode = useColorMode;

var ColorModeProvider = function ColorModeProvider(_ref) {var _ColorModeLocalStorag;var children = _ref.children;
  var _useState = (0, _react.useState)((_ColorModeLocalStorag = ColorModeLocalStorage.get()) !== null && _ColorModeLocalStorag !== void 0 ? _ColorModeLocalStorag : 'light'),_useState2 = _slicedToArray(_useState, 2),colorMode = _useState2[0],setColorMode = _useState2[1];

  var toggleColorMode = (0, _react.useCallback)(function () {
    var toggledColorMode = colorMode === 'light' ? 'dark' : 'light';
    setColorMode(toggledColorMode);
  }, [colorMode]);

  var updateColorMode = (0, _react.useCallback)(function (mode) {
    setColorMode(mode);
  }, []);

  (0, _react.useEffect)(function () {
    ColorModeLocalStorage.set(colorMode);
  }, [colorMode]);

  (0, _react.useEffect)(function () {
    if (ColorModeLocalStorage.get() == null) {
      updateColorMode(colorMode);
    }
  }, [colorMode, updateColorMode]);

  var context = (0, _react.useMemo)(
  function () {return {
      colorMode: colorMode,
      toggleColorMode: toggleColorMode,
      setColorMode: updateColorMode };},

  [colorMode, toggleColorMode, updateColorMode]);


  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColorModeContext.Provider, { value: context, children: children });
};var _default =

ColorModeProvider;exports.default = _default;