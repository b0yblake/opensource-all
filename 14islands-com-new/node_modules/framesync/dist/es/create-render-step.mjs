function createRenderStep(runNextFrame) {
  var toRun = [];
  var toRunNextFrame = [];
  var numToRun = 0;
  var isProcessing = false;
  var flushNextFrame = false;
  var toKeepAlive = new WeakSet();
  var step = {
    schedule: function schedule(callback) {
      var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var addToCurrentFrame = immediate && isProcessing;
      var buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive) toKeepAlive.add(callback);

      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing) numToRun = toRun.length;
      }

      return callback;
    },
    cancel: function cancel(callback) {
      var index = toRunNextFrame.indexOf(callback);
      if (index !== -1) toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: function process(frameData) {
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }

      isProcessing = true;
      var _ref = [toRunNextFrame, toRun];
      toRun = _ref[0];
      toRunNextFrame = _ref[1];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;

      if (numToRun) {
        for (var i = 0; i < numToRun; i++) {
          var callback = toRun[i];
          callback(frameData);

          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame();
          }
        }
      }

      isProcessing = false;

      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData);
      }
    }
  };
  return step;
}

export { createRenderStep };