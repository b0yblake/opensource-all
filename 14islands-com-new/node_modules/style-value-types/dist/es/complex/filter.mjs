import _slicedToArray from "/opt/build/repo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import { complex } from './index.mjs';
import { floatRegex } from '../utils.mjs';
var maxDefaults = new Set(['brightness', 'contrast', 'saturate', 'opacity']);

function applyDefaultFilter(v) {
  var _v$slice$split = v.slice(0, -1).split('('),
      _v$slice$split2 = _slicedToArray(_v$slice$split, 2),
      name = _v$slice$split2[0],
      value = _v$slice$split2[1];

  if (name === 'drop-shadow') return v;

  var _ref = value.match(floatRegex) || [],
      _ref2 = _slicedToArray(_ref, 1),
      number = _ref2[0];

  if (!number) return v;
  var unit = value.replace(number, '');
  var defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number !== value) defaultValue *= 100;
  return name + '(' + defaultValue + unit + ')';
}

var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter = Object.assign(Object.assign({}, complex), {
  getAnimatableNone: function getAnimatableNone(v) {
    var functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(' ') : v;
  }
});
export { filter };