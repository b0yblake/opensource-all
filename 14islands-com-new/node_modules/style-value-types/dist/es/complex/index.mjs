import _toConsumableArray from "/opt/build/repo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js";
import { color } from '../color/index.mjs';
import { number } from '../numbers/index.mjs';
import { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';
var colorToken = '${c}';
var numberToken = '${n}';

function test(v) {
  var _a, _b, _c, _d;

  return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
}

function analyse(v) {
  if (typeof v === 'number') v = "".concat(v);
  var values = [];
  var numColors = 0;
  var colors = v.match(colorRegex);

  if (colors) {
    numColors = colors.length;
    v = v.replace(colorRegex, colorToken);
    values.push.apply(values, _toConsumableArray(colors.map(color.parse)));
  }

  var numbers = v.match(floatRegex);

  if (numbers) {
    v = v.replace(floatRegex, numberToken);
    values.push.apply(values, _toConsumableArray(numbers.map(number.parse)));
  }

  return {
    values,
    numColors,
    tokenised: v
  };
}

function parse(v) {
  return analyse(v).values;
}

function createTransformer(v) {
  var _analyse = analyse(v),
      values = _analyse.values,
      numColors = _analyse.numColors,
      tokenised = _analyse.tokenised;

  var numValues = values.length;
  return function (v) {
    var output = tokenised;

    for (var i = 0; i < numValues; i++) {
      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));
    }

    return output;
  };
}

var convertNumbersToZero = function convertNumbersToZero(v) {
  return typeof v === 'number' ? 0 : v;
};

function getAnimatableNone(v) {
  var parsed = parse(v);
  var transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}

var complex = {
  test,
  parse,
  createTransformer,
  getAnimatableNone
};
export { complex };