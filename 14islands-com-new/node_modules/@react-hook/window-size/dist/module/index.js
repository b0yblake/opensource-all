import _slicedToArray from "/opt/build/repo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js";
import { useDebounce } from '@react-hook/debounce';
import useEvent from '@react-hook/event';
var emptyObj = {};
var win = typeof window === 'undefined' ? null : window;

var getSize = function getSize() {
  return [document.documentElement.clientWidth, document.documentElement.clientHeight];
};

export var useWindowSize = function useWindowSize() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyObj;
  var wait = options.wait,
      leading = options.leading,
      _options$initialWidth = options.initialWidth,
      initialWidth = _options$initialWidth === void 0 ? 0 : _options$initialWidth,
      _options$initialHeigh = options.initialHeight,
      initialHeight = _options$initialHeigh === void 0 ? 0 : _options$initialHeigh;

  var _useDebounce = useDebounce(
  /* istanbul ignore next */
  typeof document === 'undefined' ? [initialWidth, initialHeight] : getSize, wait, leading),
      _useDebounce2 = _slicedToArray(_useDebounce, 2),
      size = _useDebounce2[0],
      setDebouncedSize = _useDebounce2[1];

  var setSize = function setSize() {
    return setDebouncedSize(getSize);
  };

  useEvent(win, 'resize', setSize);
  useEvent(win, 'orientationchange', setSize);
  return size;
};
export var useWindowHeight = function useWindowHeight(options) {
  return useWindowSize(options)[1];
};
export var useWindowWidth = function useWindowWidth(options) {
  return useWindowSize(options)[0];
};