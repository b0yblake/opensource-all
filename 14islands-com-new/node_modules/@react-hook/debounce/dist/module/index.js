import * as React from 'react';
import useLatest from '@react-hook/latest';
export var useDebounceCallback = function useDebounceCallback(callback) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var leading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var storedCallback = useLatest(callback);
  var timeout = React.useRef();
  var deps = [wait, leading, storedCallback]; // Cleans up pending timeouts when the deps change

  function _ref() {
    timeout.current && clearTimeout(timeout.current);
    timeout.current = void 0;
  }

  React.useEffect(function () {
    return _ref;
  }, deps);

  function _ref2() {
    timeout.current = void 0;
  }

  return React.useCallback(function () {
    // eslint-disable-next-line prefer-rest-params
    var args = arguments;
    var current = timeout.current; // Calls on leading edge

    if (current === void 0 && leading) {
      timeout.current = setTimeout(_ref2, wait); // eslint-disable-next-line prefer-spread

      return storedCallback.current.apply(null, args);
    } // Clear the timeout every call and start waiting again


    current && clearTimeout(current); // Waits for `wait` before invoking the callback

    timeout.current = setTimeout(function () {
      timeout.current = void 0;
      storedCallback.current.apply(null, args);
    }, wait);
  }, deps);
};
export var useDebounce = function useDebounce(initialState, wait, leading) {
  var state = React.useState(initialState);
  return [state[0], useDebounceCallback(state[1], wait, leading)];
};