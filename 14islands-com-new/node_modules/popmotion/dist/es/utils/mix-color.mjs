import { mix } from './mix.mjs';
import { hsla, rgba, hex } from 'style-value-types';
import { invariant } from 'hey-listen';
import { hslaToRgba } from './hsla-to-rgba.mjs';

var mixLinearColor = function mixLinearColor(from, to, v) {
  var fromExpo = from * from;
  var toExpo = to * to;
  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};

var colorTypes = [hex, rgba, hsla];

var getColorType = function getColorType(v) {
  return colorTypes.find(function (type) {
    return type.test(v);
  });
};

var notAnimatable = function notAnimatable(color) {
  return "'".concat(color, "' is not an animatable color. Use the equivalent color code instead.");
};

var mixColor = function mixColor(from, to) {
  var fromColorType = getColorType(from);
  var toColorType = getColorType(to);
  invariant(!!fromColorType, notAnimatable(from));
  invariant(!!toColorType, notAnimatable(to));
  var fromColor = fromColorType.parse(from);
  var toColor = toColorType.parse(to);

  if (fromColorType === hsla) {
    fromColor = hslaToRgba(fromColor);
    fromColorType = rgba;
  }

  if (toColorType === hsla) {
    toColor = hslaToRgba(toColor);
    toColorType = rgba;
  }

  var blended = Object.assign({}, fromColor);
  return function (v) {
    for (var key in blended) {
      if (key !== "alpha") {
        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);
      }
    }

    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
    return fromColorType.transform(blended);
  };
};

export { mixColor, mixLinearColor };