import { __rest } from 'tslib';
import { detectAnimationFromOptions } from './utils/detect-animation-from-options.mjs';
import sync, { cancelSync } from 'framesync';
import { interpolate } from '../utils/interpolate.mjs';
import { hasRepeatDelayElapsed, reverseElapsed, loopElapsed } from './utils/elapsed.mjs';

var framesync = function framesync(update) {
  var passTimestamp = function passTimestamp(_ref) {
    var delta = _ref.delta;
    return update(delta);
  };

  return {
    start: function start() {
      return sync.update(passTimestamp, true);
    },
    stop: function stop() {
      return cancelSync.update(passTimestamp);
    }
  };
};

function animate(_a) {
  var _b, _c;

  var from = _a.from,
      _a$autoplay = _a.autoplay,
      autoplay = _a$autoplay === void 0 ? true : _a$autoplay,
      _a$driver = _a.driver,
      driver = _a$driver === void 0 ? framesync : _a$driver,
      _a$elapsed = _a.elapsed,
      elapsed = _a$elapsed === void 0 ? 0 : _a$elapsed,
      _a$repeat = _a.repeat,
      repeatMax = _a$repeat === void 0 ? 0 : _a$repeat,
      _a$repeatType = _a.repeatType,
      repeatType = _a$repeatType === void 0 ? "loop" : _a$repeatType,
      _a$repeatDelay = _a.repeatDelay,
      repeatDelay = _a$repeatDelay === void 0 ? 0 : _a$repeatDelay,
      onPlay = _a.onPlay,
      onStop = _a.onStop,
      onComplete = _a.onComplete,
      onRepeat = _a.onRepeat,
      onUpdate = _a.onUpdate,
      options = __rest(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);

  var to = options.to;
  var driverControls;
  var repeatCount = 0;
  var computedDuration = options.duration;
  var latest;
  var isComplete = false;
  var isForwardPlayback = true;
  var interpolateFromNumber;
  var animator = detectAnimationFromOptions(options);

  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {
    interpolateFromNumber = interpolate([0, 100], [from, to], {
      clamp: false
    });
    from = 0;
    to = 100;
  }

  var animation = animator(Object.assign(Object.assign({}, options), {
    from,
    to
  }));

  function repeat() {
    repeatCount++;

    if (repeatType === "reverse") {
      isForwardPlayback = repeatCount % 2 === 0;
      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
    } else {
      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
      if (repeatType === "mirror") animation.flipTarget();
    }

    isComplete = false;
    onRepeat && onRepeat();
  }

  function complete() {
    driverControls.stop();
    onComplete && onComplete();
  }

  function update(delta) {
    if (!isForwardPlayback) delta = -delta;
    elapsed += delta;

    if (!isComplete) {
      var state = animation.next(Math.max(0, elapsed));
      latest = state.value;
      if (interpolateFromNumber) latest = interpolateFromNumber(latest);
      isComplete = isForwardPlayback ? state.done : elapsed <= 0;
    }

    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);

    if (isComplete) {
      if (repeatCount === 0) computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;

      if (repeatCount < repeatMax) {
        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
      } else {
        complete();
      }
    }
  }

  function play() {
    onPlay === null || onPlay === void 0 ? void 0 : onPlay();
    driverControls = driver(update);
    driverControls.start();
  }

  autoplay && play();
  return {
    stop: function stop() {
      onStop === null || onStop === void 0 ? void 0 : onStop();
      driverControls.stop();
    }
  };
}

export { animate };