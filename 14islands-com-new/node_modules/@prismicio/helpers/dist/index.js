import _defineProperty from "/opt/build/repo/node_modules/@babel/runtime/helpers/esm/defineProperty.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { LinkType, RichTextNodeType } from '@prismicio/types';
import { asText as asText$1, composeSerializers, wrapMapSerializer, Element, serialize } from '@prismicio/richtext';
export { Element } from '@prismicio/richtext';
import escapeHtml from 'escape-html';

var asDate = function asDate(dateOrTimestampField) {
  if (!dateOrTimestampField) {
    return null;
  }

  if (dateOrTimestampField.length === 24) {
    return new Date(dateOrTimestampField.replace(/(\+|-)(\d{2})(\d{2})$/, ".000$1$2:$3"));
  } else {
    return new Date(dateOrTimestampField);
  }
};

var documentToLinkField = function documentToLinkField(prismicDocument) {
  var _a, _b, _c;

  return _objectSpread({
    link_type: LinkType.Document,
    id: prismicDocument.id,
    uid: (_a = prismicDocument.uid) != null ? _a : void 0,
    type: prismicDocument.type,
    tags: prismicDocument.tags,
    lang: prismicDocument.lang,
    url: (_b = prismicDocument.url) != null ? _b : void 0,
    slug: (_c = prismicDocument.slugs) == null ? void 0 : _c[0]
  }, Object.keys(prismicDocument.data).length > 0 ? {
    data: prismicDocument.data
  } : {});
};

var asLink = function asLink(linkFieldOrDocument, linkResolver) {
  if (!linkFieldOrDocument) {
    return null;
  }

  var linkField = "link_type" in linkFieldOrDocument ? linkFieldOrDocument : documentToLinkField(linkFieldOrDocument);

  switch (linkField.link_type) {
    case LinkType.Media:
    case LinkType.Web:
      return "url" in linkField ? linkField.url : null;

    case LinkType.Document:
      {
        if ("id" in linkField && linkResolver) {
          var resolvedURL = linkResolver(linkField);

          if (resolvedURL != null) {
            return resolvedURL;
          }
        }

        if ("url" in linkField && linkField.url) {
          return linkField.url;
        }

        return null;
      }

    case LinkType.Any:
    default:
      return null;
  }
};

var asText = function asText(richTextField, separator) {
  if (richTextField) {
    return asText$1(richTextField, separator);
  } else {
    return null;
  }
};

var getLabel = function getLabel(node) {
  return "data" in node && "label" in node.data ? " class=\"".concat(node.data.label, "\"") : "";
};

var serializeStandardTag = function serializeStandardTag(tag, node, children) {
  return "<".concat(tag).concat(getLabel(node), ">").concat(children.join(""), "</").concat(tag, ">");
};

var serializePreFormatted = function serializePreFormatted(node) {
  return "<pre".concat(getLabel(node), ">").concat(escapeHtml(node.text), "</pre>");
};

var serializeImage = function serializeImage(linkResolver, node) {
  var imageTag = "<img src=\"".concat(node.url, "\" alt=\"").concat(escapeHtml(node.alt), "\"").concat(node.copyright ? " copyright=\"".concat(escapeHtml(node.copyright), "\"") : "", " />");

  if (node.linkTo) {
    imageTag = serializeHyperlink(linkResolver, {
      type: RichTextNodeType.hyperlink,
      data: node.linkTo,
      start: 0,
      end: 0
    }, [imageTag]);
  }

  return "<p class=\"block-img\">".concat(imageTag, "</p>");
};

var serializeEmbed = function serializeEmbed(node) {
  return "<div data-oembed=\"".concat(node.oembed.embed_url, "\" data-oembed-type=\"").concat(node.oembed.type, "\" data-oembed-provider=\"").concat(node.oembed.provider_name, "\"").concat(getLabel(node), ">").concat(node.oembed.html, "</div>");
};

var serializeHyperlink = function serializeHyperlink(linkResolver, node, children) {
  switch (node.data.link_type) {
    case LinkType.Web:
      {
        return "<a href=\"".concat(escapeHtml(node.data.url), "\" target=\"").concat(node.data.target, "\" rel=\"noopener noreferrer\"").concat(getLabel(node), ">").concat(children.join(""), "</a>");
      }

    case LinkType.Document:
      {
        return "<a href=\"".concat(asLink(node.data, linkResolver), "\"").concat(getLabel(node), ">").concat(children.join(""), "</a>");
      }

    case LinkType.Media:
      {
        return "<a href=\"".concat(node.data.url, "\"").concat(getLabel(node), ">").concat(children.join(""), "</a>");
      }
  }
};

var serializeSpan = function serializeSpan(content) {
  return content ? escapeHtml(content).replace(/\n/g, "<br />") : "";
};

var createDefaultHTMLSerializer = function createDefaultHTMLSerializer(linkResolver) {
  return function (_type, node, text, children, _key) {
    switch (node.type) {
      case Element.heading1:
        return serializeStandardTag("h1", node, children);

      case Element.heading2:
        return serializeStandardTag("h2", node, children);

      case Element.heading3:
        return serializeStandardTag("h3", node, children);

      case Element.heading4:
        return serializeStandardTag("h4", node, children);

      case Element.heading5:
        return serializeStandardTag("h5", node, children);

      case Element.heading6:
        return serializeStandardTag("h6", node, children);

      case Element.paragraph:
        return serializeStandardTag("p", node, children);

      case Element.preformatted:
        return serializePreFormatted(node);

      case Element.strong:
        return serializeStandardTag("strong", node, children);

      case Element.em:
        return serializeStandardTag("em", node, children);

      case Element.listItem:
        return serializeStandardTag("li", node, children);

      case Element.oListItem:
        return serializeStandardTag("li", node, children);

      case Element.list:
        return serializeStandardTag("ul", node, children);

      case Element.oList:
        return serializeStandardTag("ol", node, children);

      case Element.image:
        return serializeImage(linkResolver, node);

      case Element.embed:
        return serializeEmbed(node);

      case Element.hyperlink:
        return serializeHyperlink(linkResolver, node, children);

      case Element.label:
        return serializeStandardTag("span", node, children);

      case Element.span:
      default:
        return serializeSpan(text);
    }
  };
};

var wrapMapSerializerWithStringChildren = function wrapMapSerializerWithStringChildren(mapSerializer) {
  var modifiedMapSerializer = {};

  var _loop = function _loop(tag) {
    var tagSerializer = mapSerializer[tag];

    if (tagSerializer) {
      modifiedMapSerializer[tag] = function (payload) {
        return tagSerializer(_objectSpread(_objectSpread({}, payload), {}, {
          children: payload.children.join("")
        }));
      };
    }
  };

  for (var tag in mapSerializer) {
    _loop(tag);
  }

  return wrapMapSerializer(modifiedMapSerializer);
};

var asHTML = function asHTML(richTextField, linkResolver, htmlSerializer) {
  if (richTextField) {
    var serializer;

    if (htmlSerializer) {
      serializer = composeSerializers(typeof htmlSerializer === "object" ? wrapMapSerializerWithStringChildren(htmlSerializer) : function (type, node, text, children, key) {
        return htmlSerializer(type, node, text, children.join(""), key);
      }, createDefaultHTMLSerializer(linkResolver));
    } else {
      serializer = createDefaultHTMLSerializer(linkResolver);
    }

    return serialize(richTextField, serializer).join("");
  } else {
    return null;
  }
};

var isNonNullish = function isNonNullish(input) {
  return input != null;
};

var isNonEmptyArray = function isNonEmptyArray(input) {
  return !!input.length;
};

var richText = function richText(field) {
  if (field.length === 1 && "text" in field[0]) {
    return !!field[0].text;
  } else {
    return !!field.length;
  }
};

var title = richText;

var imageThumbnail = function imageThumbnail(thumbnail) {
  return !!thumbnail.url;
};

var image = function image(field) {
  return imageThumbnail(field);
};

var link = function link(field) {
  return "id" in field || "url" in field;
};

var linkToMedia = link;
var contentRelationship = link;
var date = isNonNullish;
var timestamp = isNonNullish;
var color = isNonNullish;
var number = isNonNullish;
var keyText = isNonNullish;
var select = isNonNullish;

var embed = function embed(field) {
  return !!field.embed_url;
};

var geoPoint = function geoPoint(field) {
  return "longitude" in field;
};

var integrationFields = isNonNullish;
var group = isNonEmptyArray;
var sliceZone = isNonEmptyArray;
var isFilled = /*#__PURE__*/Object.freeze({
  __proto__: null,
  richText: richText,
  title: title,
  imageThumbnail: imageThumbnail,
  image: image,
  link: link,
  linkToMedia: linkToMedia,
  contentRelationship: contentRelationship,
  date: date,
  timestamp: timestamp,
  color: color,
  number: number,
  keyText: keyText,
  select: select,
  embed: embed,
  geoPoint: geoPoint,
  integrationFields: integrationFields,
  group: group,
  sliceZone: sliceZone
});
var Elements = Element;
export { Elements, asDate, asHTML, asLink, asText, documentToLinkField, isFilled };