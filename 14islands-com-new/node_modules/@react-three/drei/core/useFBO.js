import _objectWithoutProperties from "/opt/build/repo/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js";
var _excluded = ["multisample", "samples"];
import { useMemo, useEffect } from 'react';
import * as THREE from 'three';
import { useThree } from '@react-three/fiber'; // ðŸ‘‡ uncomment when TS version supports function overloads
// export function useFBO(settings?: FBOSettings)

function useFBO(width, height, settings) {
  var gl = useThree(function (_ref) {
    var gl = _ref.gl;
    return gl;
  });
  var size = useThree(function (_ref2) {
    var size = _ref2.size;
    return size;
  });
  var dpr = useMemo(function () {
    return gl.getPixelRatio();
  }, [gl]);

  var _width = typeof width === 'number' ? width : size.width * dpr;

  var _height = typeof height === 'number' ? height : size.height * dpr;

  var _settings = (typeof width === 'number' ? settings : width) || {};

  var target = useMemo(function () {
    var multisample = _settings.multisample,
        samples = _settings.samples,
        targetSettings = _objectWithoutProperties(_settings, _excluded);

    var target;

    if (multisample && gl.capabilities.isWebGL2) {
      target = new THREE.WebGLMultisampleRenderTarget(_width, _height, targetSettings);
      if (samples) target.samples = samples;
    } else {
      target = new THREE.WebGLRenderTarget(_width, _height, targetSettings);
    }

    return target;
  }, []);
  useEffect(function () {
    target.setSize(_width, _height);
  }, [target, _width, _height]);
  useEffect(function () {
    return function () {
      return target.dispose();
    };
  }, []);
  return target;
}

export { useFBO };