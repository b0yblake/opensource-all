import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Cache } from './Cache.js';
import { Loader } from './Loader.js';

var ImageBitmapLoader = /*#__PURE__*/function (_Loader) {
  _inheritsLoose(ImageBitmapLoader, _Loader);

  function ImageBitmapLoader(manager) {
    var _this;

    _this = _Loader.call(this, manager) || this;

    if (typeof createImageBitmap === 'undefined') {
      console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
    }

    if (typeof fetch === 'undefined') {
      console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
    }

    _this.options = {
      premultiplyAlpha: 'none'
    };
    return _this;
  }

  var _proto = ImageBitmapLoader.prototype;

  _proto.setOptions = function setOptions(options) {
    this.options = options;
    return this;
  };

  _proto.load = function load(url, onLoad, onProgress, onError) {
    if (url === undefined) url = '';
    if (this.path !== undefined) url = this.path + url;
    url = this.manager.resolveURL(url);
    var scope = this;
    var cached = Cache.get(url);

    if (cached !== undefined) {
      scope.manager.itemStart(url);
      setTimeout(function () {
        if (onLoad) onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }

    var fetchOptions = {};
    fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
    fetchOptions.headers = this.requestHeader;
    fetch(url, fetchOptions).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      return createImageBitmap(blob, Object.assign(scope.options, {
        colorSpaceConversion: 'none'
      }));
    }).then(function (imageBitmap) {
      Cache.add(url, imageBitmap);
      if (onLoad) onLoad(imageBitmap);
      scope.manager.itemEnd(url);
    }).catch(function (e) {
      if (onError) onError(e);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    });
    scope.manager.itemStart(url);
  };

  return ImageBitmapLoader;
}(Loader);

ImageBitmapLoader.prototype.isImageBitmapLoader = true;
export { ImageBitmapLoader };