import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { Vector4 } from '../math/Vector4.js';
import { Vector3 } from '../math/Vector3.js';
import { Vector2 } from '../math/Vector2.js';
import { Color } from '../math/Color.js';
import { StaticDrawUsage } from '../constants.js';

var _vector = /*@__PURE__*/new Vector3();

var _vector2 = /*@__PURE__*/new Vector2();

var BufferAttribute = /*#__PURE__*/function () {
  function BufferAttribute(array, itemSize, normalized) {
    if (Array.isArray(array)) {
      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
    }

    this.name = '';
    this.array = array;
    this.itemSize = itemSize;
    this.count = array !== undefined ? array.length / itemSize : 0;
    this.normalized = normalized === true;
    this.usage = StaticDrawUsage;
    this.updateRange = {
      offset: 0,
      count: -1
    };
    this.version = 0;
  }

  var _proto = BufferAttribute.prototype;

  _proto.onUploadCallback = function onUploadCallback() {};

  _proto.setUsage = function setUsage(value) {
    this.usage = value;
    return this;
  };

  _proto.copy = function copy(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    return this;
  };

  _proto.copyAt = function copyAt(index1, attribute, index2) {
    index1 *= this.itemSize;
    index2 *= attribute.itemSize;

    for (var i = 0, l = this.itemSize; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }

    return this;
  };

  _proto.copyArray = function copyArray(array) {
    this.array.set(array);
    return this;
  };

  _proto.copyColorsArray = function copyColorsArray(colors) {
    var array = this.array;
    var offset = 0;

    for (var i = 0, l = colors.length; i < l; i++) {
      var color = colors[i];

      if (color === undefined) {
        console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
        color = new Color();
      }

      array[offset++] = color.r;
      array[offset++] = color.g;
      array[offset++] = color.b;
    }

    return this;
  };

  _proto.copyVector2sArray = function copyVector2sArray(vectors) {
    var array = this.array;
    var offset = 0;

    for (var i = 0, l = vectors.length; i < l; i++) {
      var vector = vectors[i];

      if (vector === undefined) {
        console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
        vector = new Vector2();
      }

      array[offset++] = vector.x;
      array[offset++] = vector.y;
    }

    return this;
  };

  _proto.copyVector3sArray = function copyVector3sArray(vectors) {
    var array = this.array;
    var offset = 0;

    for (var i = 0, l = vectors.length; i < l; i++) {
      var vector = vectors[i];

      if (vector === undefined) {
        console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
        vector = new Vector3();
      }

      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
    }

    return this;
  };

  _proto.copyVector4sArray = function copyVector4sArray(vectors) {
    var array = this.array;
    var offset = 0;

    for (var i = 0, l = vectors.length; i < l; i++) {
      var vector = vectors[i];

      if (vector === undefined) {
        console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
        vector = new Vector4();
      }

      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
      array[offset++] = vector.w;
    }

    return this;
  };

  _proto.applyMatrix3 = function applyMatrix3(m) {
    if (this.itemSize === 2) {
      for (var i = 0, l = this.count; i < l; i++) {
        _vector2.fromBufferAttribute(this, i);

        _vector2.applyMatrix3(m);

        this.setXY(i, _vector2.x, _vector2.y);
      }
    } else if (this.itemSize === 3) {
      for (var _i = 0, _l = this.count; _i < _l; _i++) {
        _vector.fromBufferAttribute(this, _i);

        _vector.applyMatrix3(m);

        this.setXYZ(_i, _vector.x, _vector.y, _vector.z);
      }
    }

    return this;
  };

  _proto.applyMatrix4 = function applyMatrix4(m) {
    for (var i = 0, l = this.count; i < l; i++) {
      _vector.x = this.getX(i);
      _vector.y = this.getY(i);
      _vector.z = this.getZ(i);

      _vector.applyMatrix4(m);

      this.setXYZ(i, _vector.x, _vector.y, _vector.z);
    }

    return this;
  };

  _proto.applyNormalMatrix = function applyNormalMatrix(m) {
    for (var i = 0, l = this.count; i < l; i++) {
      _vector.x = this.getX(i);
      _vector.y = this.getY(i);
      _vector.z = this.getZ(i);

      _vector.applyNormalMatrix(m);

      this.setXYZ(i, _vector.x, _vector.y, _vector.z);
    }

    return this;
  };

  _proto.transformDirection = function transformDirection(m) {
    for (var i = 0, l = this.count; i < l; i++) {
      _vector.x = this.getX(i);
      _vector.y = this.getY(i);
      _vector.z = this.getZ(i);

      _vector.transformDirection(m);

      this.setXYZ(i, _vector.x, _vector.y, _vector.z);
    }

    return this;
  };

  _proto.set = function set(value, offset) {
    if (offset === void 0) {
      offset = 0;
    }

    this.array.set(value, offset);
    return this;
  };

  _proto.getX = function getX(index) {
    return this.array[index * this.itemSize];
  };

  _proto.setX = function setX(index, x) {
    this.array[index * this.itemSize] = x;
    return this;
  };

  _proto.getY = function getY(index) {
    return this.array[index * this.itemSize + 1];
  };

  _proto.setY = function setY(index, y) {
    this.array[index * this.itemSize + 1] = y;
    return this;
  };

  _proto.getZ = function getZ(index) {
    return this.array[index * this.itemSize + 2];
  };

  _proto.setZ = function setZ(index, z) {
    this.array[index * this.itemSize + 2] = z;
    return this;
  };

  _proto.getW = function getW(index) {
    return this.array[index * this.itemSize + 3];
  };

  _proto.setW = function setW(index, w) {
    this.array[index * this.itemSize + 3] = w;
    return this;
  };

  _proto.setXY = function setXY(index, x, y) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    return this;
  };

  _proto.setXYZ = function setXYZ(index, x, y, z) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    return this;
  };

  _proto.setXYZW = function setXYZW(index, x, y, z, w) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    this.array[index + 3] = w;
    return this;
  };

  _proto.onUpload = function onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  };

  _proto.clone = function clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  };

  _proto.toJSON = function toJSON() {
    var data = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.prototype.slice.call(this.array),
      normalized: this.normalized
    };
    if (this.name !== '') data.name = this.name;
    if (this.usage !== StaticDrawUsage) data.usage = this.usage;
    if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
    return data;
  };

  _createClass(BufferAttribute, [{
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) this.version++;
    }
  }]);

  return BufferAttribute;
}();

BufferAttribute.prototype.isBufferAttribute = true; //

var Int8BufferAttribute = /*#__PURE__*/function (_BufferAttribute) {
  _inheritsLoose(Int8BufferAttribute, _BufferAttribute);

  function Int8BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute.call(this, new Int8Array(array), itemSize, normalized) || this;
  }

  return Int8BufferAttribute;
}(BufferAttribute);

var Uint8BufferAttribute = /*#__PURE__*/function (_BufferAttribute2) {
  _inheritsLoose(Uint8BufferAttribute, _BufferAttribute2);

  function Uint8BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute2.call(this, new Uint8Array(array), itemSize, normalized) || this;
  }

  return Uint8BufferAttribute;
}(BufferAttribute);

var Uint8ClampedBufferAttribute = /*#__PURE__*/function (_BufferAttribute3) {
  _inheritsLoose(Uint8ClampedBufferAttribute, _BufferAttribute3);

  function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute3.call(this, new Uint8ClampedArray(array), itemSize, normalized) || this;
  }

  return Uint8ClampedBufferAttribute;
}(BufferAttribute);

var Int16BufferAttribute = /*#__PURE__*/function (_BufferAttribute4) {
  _inheritsLoose(Int16BufferAttribute, _BufferAttribute4);

  function Int16BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute4.call(this, new Int16Array(array), itemSize, normalized) || this;
  }

  return Int16BufferAttribute;
}(BufferAttribute);

var Uint16BufferAttribute = /*#__PURE__*/function (_BufferAttribute5) {
  _inheritsLoose(Uint16BufferAttribute, _BufferAttribute5);

  function Uint16BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute5.call(this, new Uint16Array(array), itemSize, normalized) || this;
  }

  return Uint16BufferAttribute;
}(BufferAttribute);

var Int32BufferAttribute = /*#__PURE__*/function (_BufferAttribute6) {
  _inheritsLoose(Int32BufferAttribute, _BufferAttribute6);

  function Int32BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute6.call(this, new Int32Array(array), itemSize, normalized) || this;
  }

  return Int32BufferAttribute;
}(BufferAttribute);

var Uint32BufferAttribute = /*#__PURE__*/function (_BufferAttribute7) {
  _inheritsLoose(Uint32BufferAttribute, _BufferAttribute7);

  function Uint32BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute7.call(this, new Uint32Array(array), itemSize, normalized) || this;
  }

  return Uint32BufferAttribute;
}(BufferAttribute);

var Float16BufferAttribute = /*#__PURE__*/function (_BufferAttribute8) {
  _inheritsLoose(Float16BufferAttribute, _BufferAttribute8);

  function Float16BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute8.call(this, new Uint16Array(array), itemSize, normalized) || this;
  }

  return Float16BufferAttribute;
}(BufferAttribute);

Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;

var Float32BufferAttribute = /*#__PURE__*/function (_BufferAttribute9) {
  _inheritsLoose(Float32BufferAttribute, _BufferAttribute9);

  function Float32BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute9.call(this, new Float32Array(array), itemSize, normalized) || this;
  }

  return Float32BufferAttribute;
}(BufferAttribute);

var Float64BufferAttribute = /*#__PURE__*/function (_BufferAttribute10) {
  _inheritsLoose(Float64BufferAttribute, _BufferAttribute10);

  function Float64BufferAttribute(array, itemSize, normalized) {
    return _BufferAttribute10.call(this, new Float64Array(array), itemSize, normalized) || this;
  }

  return Float64BufferAttribute;
}(BufferAttribute); //


export { Float64BufferAttribute, Float32BufferAttribute, Float16BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute };