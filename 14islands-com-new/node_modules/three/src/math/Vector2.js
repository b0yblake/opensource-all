import _createClass from "@babel/runtime/helpers/esm/createClass";

var Vector2 = /*#__PURE__*/function () {
  function Vector2(x, y) {
    if (x === void 0) {
      x = 0;
    }

    if (y === void 0) {
      y = 0;
    }

    this.x = x;
    this.y = y;
  }

  var _proto = Vector2.prototype;

  _proto.set = function set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  };

  _proto.setScalar = function setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  };

  _proto.setX = function setX(x) {
    this.x = x;
    return this;
  };

  _proto.setY = function setY(y) {
    this.y = y;
    return this;
  };

  _proto.setComponent = function setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;

      case 1:
        this.y = value;
        break;

      default:
        throw new Error('index is out of range: ' + index);
    }

    return this;
  };

  _proto.getComponent = function getComponent(index) {
    switch (index) {
      case 0:
        return this.x;

      case 1:
        return this.y;

      default:
        throw new Error('index is out of range: ' + index);
    }
  };

  _proto.clone = function clone() {
    return new this.constructor(this.x, this.y);
  };

  _proto.copy = function copy(v) {
    this.x = v.x;
    this.y = v.y;
    return this;
  };

  _proto.add = function add(v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
      return this.addVectors(v, w);
    }

    this.x += v.x;
    this.y += v.y;
    return this;
  };

  _proto.addScalar = function addScalar(s) {
    this.x += s;
    this.y += s;
    return this;
  };

  _proto.addVectors = function addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  };

  _proto.addScaledVector = function addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    return this;
  };

  _proto.sub = function sub(v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
      return this.subVectors(v, w);
    }

    this.x -= v.x;
    this.y -= v.y;
    return this;
  };

  _proto.subScalar = function subScalar(s) {
    this.x -= s;
    this.y -= s;
    return this;
  };

  _proto.subVectors = function subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  };

  _proto.multiply = function multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    return this;
  };

  _proto.multiplyScalar = function multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  };

  _proto.divide = function divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    return this;
  };

  _proto.divideScalar = function divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  };

  _proto.applyMatrix3 = function applyMatrix3(m) {
    var x = this.x,
        y = this.y;
    var e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6];
    this.y = e[1] * x + e[4] * y + e[7];
    return this;
  };

  _proto.min = function min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    return this;
  };

  _proto.max = function max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    return this;
  };

  _proto.clamp = function clamp(min, max) {
    // assumes min < max, componentwise
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    return this;
  };

  _proto.clampScalar = function clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    return this;
  };

  _proto.clampLength = function clampLength(min, max) {
    var length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  };

  _proto.floor = function floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  };

  _proto.ceil = function ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  };

  _proto.round = function round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  };

  _proto.roundToZero = function roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  };

  _proto.negate = function negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  };

  _proto.dot = function dot(v) {
    return this.x * v.x + this.y * v.y;
  };

  _proto.cross = function cross(v) {
    return this.x * v.y - this.y * v.x;
  };

  _proto.lengthSq = function lengthSq() {
    return this.x * this.x + this.y * this.y;
  };

  _proto.length = function length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  };

  _proto.manhattanLength = function manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  };

  _proto.normalize = function normalize() {
    return this.divideScalar(this.length() || 1);
  };

  _proto.angle = function angle() {
    // computes the angle in radians with respect to the positive x-axis
    var angle = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle;
  };

  _proto.distanceTo = function distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  };

  _proto.distanceToSquared = function distanceToSquared(v) {
    var dx = this.x - v.x,
        dy = this.y - v.y;
    return dx * dx + dy * dy;
  };

  _proto.manhattanDistanceTo = function manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
  };

  _proto.setLength = function setLength(length) {
    return this.normalize().multiplyScalar(length);
  };

  _proto.lerp = function lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    return this;
  };

  _proto.lerpVectors = function lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    return this;
  };

  _proto.equals = function equals(v) {
    return v.x === this.x && v.y === this.y;
  };

  _proto.fromArray = function fromArray(array, offset) {
    if (offset === void 0) {
      offset = 0;
    }

    this.x = array[offset];
    this.y = array[offset + 1];
    return this;
  };

  _proto.toArray = function toArray(array, offset) {
    if (array === void 0) {
      array = [];
    }

    if (offset === void 0) {
      offset = 0;
    }

    array[offset] = this.x;
    array[offset + 1] = this.y;
    return array;
  };

  _proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {
    if (offset !== undefined) {
      console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
    }

    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    return this;
  };

  _proto.rotateAround = function rotateAround(center, angle) {
    var c = Math.cos(angle),
        s = Math.sin(angle);
    var x = this.x - center.x;
    var y = this.y - center.y;
    this.x = x * c - y * s + center.x;
    this.y = x * s + y * c + center.y;
    return this;
  };

  _proto.random = function random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  };

  _createClass(Vector2, [{
    key: "width",
    get: function get() {
      return this.x;
    },
    set: function set(value) {
      this.x = value;
    }
  }, {
    key: "height",
    get: function get() {
      return this.y;
    },
    set: function set(value) {
      this.y = value;
    }
  }]);

  return Vector2;
}();

Vector2.prototype.isVector2 = true;
export { Vector2 };