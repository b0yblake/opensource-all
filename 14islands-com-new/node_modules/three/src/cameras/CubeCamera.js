import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Object3D } from '../core/Object3D.js';
import { Vector3 } from '../math/Vector3.js';
import { PerspectiveCamera } from './PerspectiveCamera.js';
var fov = 90,
    aspect = 1;

var CubeCamera = /*#__PURE__*/function (_Object3D) {
  _inheritsLoose(CubeCamera, _Object3D);

  function CubeCamera(near, far, renderTarget) {
    var _this;

    _this = _Object3D.call(this) || this;
    _this.type = 'CubeCamera';

    if (renderTarget.isWebGLCubeRenderTarget !== true) {
      console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
      return _assertThisInitialized(_this);
    }

    _this.renderTarget = renderTarget;
    var cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = _this.layers;
    cameraPX.up.set(0, -1, 0);
    cameraPX.lookAt(new Vector3(1, 0, 0));

    _this.add(cameraPX);

    var cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = _this.layers;
    cameraNX.up.set(0, -1, 0);
    cameraNX.lookAt(new Vector3(-1, 0, 0));

    _this.add(cameraNX);

    var cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = _this.layers;
    cameraPY.up.set(0, 0, 1);
    cameraPY.lookAt(new Vector3(0, 1, 0));

    _this.add(cameraPY);

    var cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = _this.layers;
    cameraNY.up.set(0, 0, -1);
    cameraNY.lookAt(new Vector3(0, -1, 0));

    _this.add(cameraNY);

    var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = _this.layers;
    cameraPZ.up.set(0, -1, 0);
    cameraPZ.lookAt(new Vector3(0, 0, 1));

    _this.add(cameraPZ);

    var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = _this.layers;
    cameraNZ.up.set(0, -1, 0);
    cameraNZ.lookAt(new Vector3(0, 0, -1));

    _this.add(cameraNZ);

    return _this;
  }

  var _proto = CubeCamera.prototype;

  _proto.update = function update(renderer, scene) {
    if (this.parent === null) this.updateMatrixWorld();
    var renderTarget = this.renderTarget;
    var _this$children = this.children,
        cameraPX = _this$children[0],
        cameraNX = _this$children[1],
        cameraPY = _this$children[2],
        cameraNY = _this$children[3],
        cameraPZ = _this$children[4],
        cameraNZ = _this$children[5];
    var currentXrEnabled = renderer.xr.enabled;
    var currentRenderTarget = renderer.getRenderTarget();
    renderer.xr.enabled = false;
    var generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer.setRenderTarget(renderTarget, 0);
    renderer.render(scene, cameraPX);
    renderer.setRenderTarget(renderTarget, 1);
    renderer.render(scene, cameraNX);
    renderer.setRenderTarget(renderTarget, 2);
    renderer.render(scene, cameraPY);
    renderer.setRenderTarget(renderTarget, 3);
    renderer.render(scene, cameraNY);
    renderer.setRenderTarget(renderTarget, 4);
    renderer.render(scene, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer.setRenderTarget(renderTarget, 5);
    renderer.render(scene, cameraNZ);
    renderer.setRenderTarget(currentRenderTarget);
    renderer.xr.enabled = currentXrEnabled;
  };

  return CubeCamera;
}(Object3D);

export { CubeCamera };