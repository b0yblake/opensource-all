import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Camera } from './Camera.js';

var OrthographicCamera = /*#__PURE__*/function (_Camera) {
  _inheritsLoose(OrthographicCamera, _Camera);

  function OrthographicCamera(left, right, top, bottom, near, far) {
    var _this;

    if (left === void 0) {
      left = -1;
    }

    if (right === void 0) {
      right = 1;
    }

    if (top === void 0) {
      top = 1;
    }

    if (bottom === void 0) {
      bottom = -1;
    }

    if (near === void 0) {
      near = 0.1;
    }

    if (far === void 0) {
      far = 2000;
    }

    _this = _Camera.call(this) || this;
    _this.type = 'OrthographicCamera';
    _this.zoom = 1;
    _this.view = null;
    _this.left = left;
    _this.right = right;
    _this.top = top;
    _this.bottom = bottom;
    _this.near = near;
    _this.far = far;

    _this.updateProjectionMatrix();

    return _this;
  }

  var _proto = OrthographicCamera.prototype;

  _proto.copy = function copy(source, recursive) {
    _Camera.prototype.copy.call(this, source, recursive);

    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  };

  _proto.setViewOffset = function setViewOffset(fullWidth, fullHeight, x, y, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }

    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  };

  _proto.clearViewOffset = function clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }

    this.updateProjectionMatrix();
  };

  _proto.updateProjectionMatrix = function updateProjectionMatrix() {
    var dx = (this.right - this.left) / (2 * this.zoom);
    var dy = (this.top - this.bottom) / (2 * this.zoom);
    var cx = (this.right + this.left) / 2;
    var cy = (this.top + this.bottom) / 2;
    var left = cx - dx;
    var right = cx + dx;
    var top = cy + dy;
    var bottom = cy - dy;

    if (this.view !== null && this.view.enabled) {
      var scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      var scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }

    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  };

  _proto.toJSON = function toJSON(meta) {
    var data = _Camera.prototype.toJSON.call(this, meta);

    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    return data;
  };

  return OrthographicCamera;
}(Camera);

OrthographicCamera.prototype.isOrthographicCamera = true;
export { OrthographicCamera };