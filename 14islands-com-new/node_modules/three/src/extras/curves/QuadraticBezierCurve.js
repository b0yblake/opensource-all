import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Curve } from '../core/Curve.js';
import { QuadraticBezier } from '../core/Interpolations.js';
import { Vector2 } from '../../math/Vector2.js';

var QuadraticBezierCurve = /*#__PURE__*/function (_Curve) {
  _inheritsLoose(QuadraticBezierCurve, _Curve);

  function QuadraticBezierCurve(v0, v1, v2) {
    var _this;

    if (v0 === void 0) {
      v0 = new Vector2();
    }

    if (v1 === void 0) {
      v1 = new Vector2();
    }

    if (v2 === void 0) {
      v2 = new Vector2();
    }

    _this = _Curve.call(this) || this;
    _this.type = 'QuadraticBezierCurve';
    _this.v0 = v0;
    _this.v1 = v1;
    _this.v2 = v2;
    return _this;
  }

  var _proto = QuadraticBezierCurve.prototype;

  _proto.getPoint = function getPoint(t, optionalTarget) {
    if (optionalTarget === void 0) {
      optionalTarget = new Vector2();
    }

    var point = optionalTarget;
    var v0 = this.v0,
        v1 = this.v1,
        v2 = this.v2;
    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
    return point;
  };

  _proto.copy = function copy(source) {
    _Curve.prototype.copy.call(this, source);

    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };

  _proto.toJSON = function toJSON() {
    var data = _Curve.prototype.toJSON.call(this);

    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };

  _proto.fromJSON = function fromJSON(json) {
    _Curve.prototype.fromJSON.call(this, json);

    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };

  return QuadraticBezierCurve;
}(Curve);

QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
export { QuadraticBezierCurve };