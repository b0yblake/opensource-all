import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Vector3 } from '../../math/Vector3.js';
import { Curve } from '../core/Curve.js';

var LineCurve3 = /*#__PURE__*/function (_Curve) {
  _inheritsLoose(LineCurve3, _Curve);

  function LineCurve3(v1, v2) {
    var _this;

    if (v1 === void 0) {
      v1 = new Vector3();
    }

    if (v2 === void 0) {
      v2 = new Vector3();
    }

    _this = _Curve.call(this) || this;
    _this.type = 'LineCurve3';
    _this.isLineCurve3 = true;
    _this.v1 = v1;
    _this.v2 = v2;
    return _this;
  }

  var _proto = LineCurve3.prototype;

  _proto.getPoint = function getPoint(t, optionalTarget) {
    if (optionalTarget === void 0) {
      optionalTarget = new Vector3();
    }

    var point = optionalTarget;

    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }

    return point;
  } // Line curve is linear, so we can overwrite default getPointAt
  ;

  _proto.getPointAt = function getPointAt(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  };

  _proto.copy = function copy(source) {
    _Curve.prototype.copy.call(this, source);

    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  };

  _proto.toJSON = function toJSON() {
    var data = _Curve.prototype.toJSON.call(this);

    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  };

  _proto.fromJSON = function fromJSON(json) {
    _Curve.prototype.fromJSON.call(this, json);

    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  };

  return LineCurve3;
}(Curve);

export { LineCurve3 };