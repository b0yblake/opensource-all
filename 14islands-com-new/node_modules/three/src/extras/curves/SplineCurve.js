import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Curve } from '../core/Curve.js';
import { CatmullRom } from '../core/Interpolations.js';
import { Vector2 } from '../../math/Vector2.js';

var SplineCurve = /*#__PURE__*/function (_Curve) {
  _inheritsLoose(SplineCurve, _Curve);

  function SplineCurve(points) {
    var _this;

    if (points === void 0) {
      points = [];
    }

    _this = _Curve.call(this) || this;
    _this.type = 'SplineCurve';
    _this.points = points;
    return _this;
  }

  var _proto = SplineCurve.prototype;

  _proto.getPoint = function getPoint(t, optionalTarget) {
    if (optionalTarget === void 0) {
      optionalTarget = new Vector2();
    }

    var point = optionalTarget;
    var points = this.points;
    var p = (points.length - 1) * t;
    var intPoint = Math.floor(p);
    var weight = p - intPoint;
    var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
    var p1 = points[intPoint];
    var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
    var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
    return point;
  };

  _proto.copy = function copy(source) {
    _Curve.prototype.copy.call(this, source);

    this.points = [];

    for (var i = 0, l = source.points.length; i < l; i++) {
      var point = source.points[i];
      this.points.push(point.clone());
    }

    return this;
  };

  _proto.toJSON = function toJSON() {
    var data = _Curve.prototype.toJSON.call(this);

    data.points = [];

    for (var i = 0, l = this.points.length; i < l; i++) {
      var point = this.points[i];
      data.points.push(point.toArray());
    }

    return data;
  };

  _proto.fromJSON = function fromJSON(json) {
    _Curve.prototype.fromJSON.call(this, json);

    this.points = [];

    for (var i = 0, l = json.points.length; i < l; i++) {
      var point = json.points[i];
      this.points.push(new Vector2().fromArray(point));
    }

    return this;
  };

  return SplineCurve;
}(Curve);

SplineCurve.prototype.isSplineCurve = true;
export { SplineCurve };