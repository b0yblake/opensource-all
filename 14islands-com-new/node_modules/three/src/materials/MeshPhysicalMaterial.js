import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { Vector2 } from '../math/Vector2.js';
import { MeshStandardMaterial } from './MeshStandardMaterial.js';
import { Color } from '../math/Color.js';
import * as MathUtils from '../math/MathUtils.js';
/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheenTint: <Color>,
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationTint: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityhMap: new THREE.Texture( <Image> ),
 *  specularTint: <Color>,
 *  specularTintMap: new THREE.Texture( <Image> )
 * }
 */

var MeshPhysicalMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {
  _inheritsLoose(MeshPhysicalMaterial, _MeshStandardMaterial);

  function MeshPhysicalMaterial(parameters) {
    var _this;

    _this = _MeshStandardMaterial.call(this) || this;
    _this.defines = {
      'STANDARD': '',
      'PHYSICAL': ''
    };
    _this.type = 'MeshPhysicalMaterial';
    _this.clearcoatMap = null;
    _this.clearcoatRoughness = 0.0;
    _this.clearcoatRoughnessMap = null;
    _this.clearcoatNormalScale = new Vector2(1, 1);
    _this.clearcoatNormalMap = null;
    _this.ior = 1.5;
    Object.defineProperty(_assertThisInitialized(_this), 'reflectivity', {
      get: function get() {
        return MathUtils.clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function set(reflectivity) {
        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
      }
    });
    _this.sheenTint = new Color(0x000000);
    _this.transmission = 0.0;
    _this.transmissionMap = null;
    _this.thickness = 0.01;
    _this.thicknessMap = null;
    _this.attenuationDistance = 0.0;
    _this.attenuationTint = new Color(1, 1, 1);
    _this.specularIntensity = 1.0;
    _this.specularIntensityMap = null;
    _this.specularTint = new Color(1, 1, 1);
    _this.specularTintMap = null;
    _this._clearcoat = 0;
    _this._transmission = 0;

    _this.setValues(parameters);

    return _this;
  }

  var _proto = MeshPhysicalMaterial.prototype;

  _proto.copy = function copy(source) {
    _MeshStandardMaterial.prototype.copy.call(this, source);

    this.defines = {
      'STANDARD': '',
      'PHYSICAL': ''
    };
    this.clearcoat = source.clearcoat;
    this.clearcoatMap = source.clearcoatMap;
    this.clearcoatRoughness = source.clearcoatRoughness;
    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    this.clearcoatNormalMap = source.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
    this.ior = source.ior;
    this.sheenTint.copy(source.sheenTint);
    this.transmission = source.transmission;
    this.transmissionMap = source.transmissionMap;
    this.thickness = source.thickness;
    this.thicknessMap = source.thicknessMap;
    this.attenuationDistance = source.attenuationDistance;
    this.attenuationTint.copy(source.attenuationTint);
    this.specularIntensity = source.specularIntensity;
    this.specularIntensityMap = source.specularIntensityMap;
    this.specularTint.copy(source.specularTint);
    this.specularTintMap = source.specularTintMap;
    return this;
  };

  _createClass(MeshPhysicalMaterial, [{
    key: "clearcoat",
    get: function get() {
      return this._clearcoat;
    },
    set: function set(value) {
      if (this._clearcoat > 0 !== value > 0) {
        this.version++;
      }

      this._clearcoat = value;
    }
  }, {
    key: "transmission",
    get: function get() {
      return this._transmission;
    },
    set: function set(value) {
      if (this._transmission > 0 !== value > 0) {
        this.version++;
      }

      this._transmission = value;
    }
  }]);

  return MeshPhysicalMaterial;
}(MeshStandardMaterial);

MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
export { MeshPhysicalMaterial };