import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';
import { Material } from './Material.js';
import { Vector2 } from '../math/Vector2.js';
import { Color } from '../math/Color.js';
/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */

var MeshPhongMaterial = /*#__PURE__*/function (_Material) {
  _inheritsLoose(MeshPhongMaterial, _Material);

  function MeshPhongMaterial(parameters) {
    var _this;

    _this = _Material.call(this) || this;
    _this.type = 'MeshPhongMaterial';
    _this.color = new Color(0xffffff); // diffuse

    _this.specular = new Color(0x111111);
    _this.shininess = 30;
    _this.map = null;
    _this.lightMap = null;
    _this.lightMapIntensity = 1.0;
    _this.aoMap = null;
    _this.aoMapIntensity = 1.0;
    _this.emissive = new Color(0x000000);
    _this.emissiveIntensity = 1.0;
    _this.emissiveMap = null;
    _this.bumpMap = null;
    _this.bumpScale = 1;
    _this.normalMap = null;
    _this.normalMapType = TangentSpaceNormalMap;
    _this.normalScale = new Vector2(1, 1);
    _this.displacementMap = null;
    _this.displacementScale = 1;
    _this.displacementBias = 0;
    _this.specularMap = null;
    _this.alphaMap = null;
    _this.envMap = null;
    _this.combine = MultiplyOperation;
    _this.reflectivity = 1;
    _this.refractionRatio = 0.98;
    _this.wireframe = false;
    _this.wireframeLinewidth = 1;
    _this.wireframeLinecap = 'round';
    _this.wireframeLinejoin = 'round';
    _this.flatShading = false;

    _this.setValues(parameters);

    return _this;
  }

  var _proto = MeshPhongMaterial.prototype;

  _proto.copy = function copy(source) {
    _Material.prototype.copy.call(this, source);

    this.color.copy(source.color);
    this.specular.copy(source.specular);
    this.shininess = source.shininess;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    return this;
  };

  return MeshPhongMaterial;
}(Material);

MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
export { MeshPhongMaterial };