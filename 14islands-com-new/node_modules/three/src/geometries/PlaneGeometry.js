import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { BufferGeometry } from '../core/BufferGeometry.js';
import { Float32BufferAttribute } from '../core/BufferAttribute.js';

var PlaneGeometry = /*#__PURE__*/function (_BufferGeometry) {
  _inheritsLoose(PlaneGeometry, _BufferGeometry);

  function PlaneGeometry(width, height, widthSegments, heightSegments) {
    var _this;

    if (width === void 0) {
      width = 1;
    }

    if (height === void 0) {
      height = 1;
    }

    if (widthSegments === void 0) {
      widthSegments = 1;
    }

    if (heightSegments === void 0) {
      heightSegments = 1;
    }

    _this = _BufferGeometry.call(this) || this;
    _this.type = 'PlaneGeometry';
    _this.parameters = {
      width: width,
      height: height,
      widthSegments: widthSegments,
      heightSegments: heightSegments
    };
    var width_half = width / 2;
    var height_half = height / 2;
    var gridX = Math.floor(widthSegments);
    var gridY = Math.floor(heightSegments);
    var gridX1 = gridX + 1;
    var gridY1 = gridY + 1;
    var segment_width = width / gridX;
    var segment_height = height / gridY; //

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = [];

    for (var iy = 0; iy < gridY1; iy++) {
      var y = iy * segment_height - height_half;

      for (var ix = 0; ix < gridX1; ix++) {
        var x = ix * segment_width - width_half;
        vertices.push(x, -y, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }

    for (var _iy = 0; _iy < gridY; _iy++) {
      for (var _ix = 0; _ix < gridX; _ix++) {
        var a = _ix + gridX1 * _iy;
        var b = _ix + gridX1 * (_iy + 1);
        var c = _ix + 1 + gridX1 * (_iy + 1);
        var d = _ix + 1 + gridX1 * _iy;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }

    _this.setIndex(indices);

    _this.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    return _this;
  }

  PlaneGeometry.fromJSON = function fromJSON(data) {
    return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
  };

  return PlaneGeometry;
}(BufferGeometry);

export { PlaneGeometry, PlaneGeometry as PlaneBufferGeometry };