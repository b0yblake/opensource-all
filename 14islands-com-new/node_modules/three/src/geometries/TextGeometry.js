import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
/**
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
 *  bevelOffset: <float> // how far from text outline does bevel start
 * }
 */

import { BufferGeometry } from '../core/BufferGeometry.js';
import { ExtrudeGeometry } from './ExtrudeGeometry.js';

var TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {
  _inheritsLoose(TextGeometry, _ExtrudeGeometry);

  function TextGeometry(text, parameters) {
    var _this;

    if (parameters === void 0) {
      parameters = {};
    }

    var font = parameters.font;

    if (!(font && font.isFont)) {
      console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');
      return new BufferGeometry() || _assertThisInitialized(_this);
    }

    var shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API

    parameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults

    if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;
    if (parameters.bevelSize === undefined) parameters.bevelSize = 8;
    if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;
    _this = _ExtrudeGeometry.call(this, shapes, parameters) || this;
    _this.type = 'TextGeometry';
    return _this;
  }

  return TextGeometry;
}(ExtrudeGeometry);

export { TextGeometry, TextGeometry as TextBufferGeometry };