import { constFalse, constTrue, flow, pipe } from './function'; // -------------------------------------------------------------------------------------
// type class members
// -------------------------------------------------------------------------------------

var contramap_ = function contramap_(predicate, f) {
  return pipe(predicate, contramap(f));
};
/**
 * @category Contravariant
 * @since 2.11.0
 */


export var contramap = function contramap(f) {
  return function (predicate) {
    return flow(f, predicate);
  };
}; // -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------

/**
 * @category instances
 * @since 2.11.0
 */

export var URI = 'Predicate';
/**
 * @category instances
 * @since 2.11.0
 */

export var getSemigroupAny = function getSemigroupAny() {
  return {
    concat: function concat(first, second) {
      return pipe(first, or(second));
    }
  };
};
/**
 * @category instances
 * @since 2.11.0
 */

export var getMonoidAny = function getMonoidAny() {
  return {
    concat: getSemigroupAny().concat,
    empty: constFalse
  };
};
/**
 * @category instances
 * @since 2.11.0
 */

export var getSemigroupAll = function getSemigroupAll() {
  return {
    concat: function concat(first, second) {
      return pipe(first, and(second));
    }
  };
};
/**
 * @category instances
 * @since 2.11.0
 */

export var getMonoidAll = function getMonoidAll() {
  return {
    concat: getSemigroupAll().concat,
    empty: constTrue
  };
};
/**
 * @category instances
 * @since 2.11.0
 */

export var Contravariant = {
  URI: URI,
  contramap: contramap_
}; // -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------

/**
 * @since 2.11.0
 */

export var not = function not(predicate) {
  return function (a) {
    return !predicate(a);
  };
};
/**
 * @since 2.11.0
 */

export var or = function or(second) {
  return function (first) {
    return function (a) {
      return first(a) || second(a);
    };
  };
};
/**
 * @since 2.11.0
 */

export var and = function and(second) {
  return function (first) {
    return function (a) {
      return first(a) && second(a);
    };
  };
};